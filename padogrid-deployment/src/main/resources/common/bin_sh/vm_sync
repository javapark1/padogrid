#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -vm -rwe -simulate -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

#
# Determeint $TAR_BALL_PATH
#
ROOT_DIR_NAME=$(basename $BASE_DIR)
TOP_DIR="$(dirname "$BASE_DIR")"
TAR_BALL_GZ_NAME=$ROOT_DIR_NAME.tar.gz
TAR_BALL_GZ_PATH=$BASE_DIR/bundles/$TAR_BALL_GZ_NAME

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Synchronize the rmote VMs with the local workspace

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-vm comma_separated_hosts] [-rwe] [-simulate] [-?]

DESCRIPTION
   Synchronizes all the VMs defined by VM_HOSTS environment variable in the workspace
   'vmenv.sh' file with the local workspace. To synchronize only the cluster VMs, specify
   the cluster with the '-cluster' option. To synchronize a select list of VMs, specify
   the VM list with the '-vm' option.

   Note that this command and all other commands that begin with the "vm_" preprefix are
   available only on VM workspaces.

   The '-vm' option overrides both the '-cluster' option and VM_HOSTS. The '-cluster' option
   overrides VM_HOSTS. 

OPTIONS
   -cluster cluster_name
             Cluster name.

   -vm comma_separated_hosts
             A comma separated list of VM hosts or addresses. If the list contains spaces
             then enclosed it in quotes.

   -rwe
             Synchronizes RWE specific configuration files also. Specify this option if the license keys
             are updated in the RWE's hidden file, '.<project>env.sh', for example.

   -simulate
             Print the remote commands but do not execute.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER file_path

FILES
   $PADOGRID_WORKSPACE/vmenv.sh
             The current remote workspace VM configuration file.
EOF
fi
cat <<EOF

SEE ALSO
EOF
   printSeeAlsoList "vm_*" $EXECUTABLE
   exit
fi

if [ "$SIMULATE" == "true" ]; then
   echo ""
   echo "In simulation mode [$EXECUTABLE]..."
   echo ""
fi

# Available only on VM workspaces
if [ "$VM_ENABLED" != "true" ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "    ERROR: The workspace is not a VM workspace. Command aborted."
   echo "----------------------------------------------------------------"
   exit 1 
fi

# If the -vm option is specified then it overrides all other options
if [ "$VM_SPECIFIED" == "true" ]; then
   if [ "$VM_HOSTS_ARG" != "" ] && [[ "$VM_HOSTS_ARG" != *"-"* ]]; then
      VM_HOSTS=$VM_HOSTS_ARG
   else
      echo "----------------------------------------------------------------"
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo >&2 "ERROR: Invalid value for -vm [$VM_HOSTS_ARG]. Command aborted."
      echo "----------------------------------------------------------------"
      exit 1
   fi
else
   # The -cluster option overrides VM_HOSTS
   if [ "$CLUSTER_SPECIFIED" == "true" ]; then
      if [ "`isClusterExist "$CLUSTER"`" == "false" ]; then 
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Cluster does not exist [$CLUSTER]. Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
      if [ "$VM_ENABLED" == "false" ]; then
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Not a VM cluster [$CLUSTER]. To enable VMs, set the 'vm.enabled' property"
         echo >&2 "       in the 'etc/cluster.properties' file."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_HOSTS=`getClusterProperty "vm.hosts"`
      if [ "$VM_HOSTS" == "" ]; then
         if [ "$VM_HOSTS" == "" ]; then
            echo "----------------------------------------------------------------"
            echo "WORKSPACE: $PADOGRID_WORKSPACE"
            echo >&2 "    ERROR: The 'vm.hosts' property is not set in the 'etc/cluster.properties' file."
            echo >&2 "           file. Command aborted."
            echo "----------------------------------------------------------------"
            exit 1
         fi
      fi
   fi
fi

WORKSPACE_NAME=$(basename "$PADOGRID_WORKSPACE")

# Replace , with space
__VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
DEFAULT_USER=$(whoami)
VM_USER=`getClusterProperty "vm.user" "$DEFAULT_USER"`

if [ "$KEY" == "" ]; then
   KEY=`getClusterProperty "vm.privateKeyFile"`
fi
if [ "$KEY" == "" ]; then 
   KEY="$VM_PRIVATE_KEY_FILE"
fi
VM_KEY=""
if [ "$KEY" != "" ]; then 
   if [ ! -f "$KEY" ]; then
      echo >&2 "ERROR: Specified private key does not exist [$KEY]."
      echo >&2 "       Command aborted."
      exit 1
   fi
   VM_KEY="-i $KEY"
fi

# Fail fast: Exit if any of the hosts is not reachable
for VM_HOST in $__VM_HOSTS; do
   REPLY=$(ssh -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT -o PasswordAuthentication=no "echo hello" 2>&1)
   EXIT_CODE=$?
   if [ "$EXIT_CODE" != "0" ]; then
      echo -e "ERROR: $VM_HOST - ${CLightRed}Failed${CNone} ($REPLY)"
      echo "       Command aborted."
      exit 1
   fi
done

# Replace '~' with the VM home path in 'vmenv.sh'
VM_HOME=""
for VM_HOST in $__VM_HOSTS; do
   VM_HOME=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "cd && pwd")
   break;
done
VM_HOME=$(echo $VM_HOME | sed 's/\//\\\//g')
sed -i$__SED_BACKUP -e "s/\~/$VM_HOME/" "$PADOGRID_WORKSPACE/vmenv.sh"
VM_PADOGRID_ENV_BASE_PATH=$(echo $VM_PADOGRID_ENV_BASE_PATH | sed -e "s/\~/$VM_HOME/")
VM_PADOGRID_WORKSPACES_HOME=$(echo $VM_PADOGRID_WORKSPACES_HOME | sed -e "s/\~/$VM_HOME/")
VM_JAVA_HOME=$(echo $VM_JAVA_HOME | sed -e "s/\~/$VM_HOME/")

# Check if we need to deploy padogrid to any of the VMs
ADDON_COMMAND="[ -d "$VM_PADOGRID_HOME" ] && echo true || echo false"
JAVA_COMMAND="[ -d "$VM_JAVA_HOME" ] && echo true || echo false"
INSTALL_ADDON_HOST_LIST=""
for VM_HOST in $__VM_HOSTS; do
   # padogrid
   ADDON_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$ADDON_COMMAND")
   if [[ "$ADDON_EXISTS" == *"false" ]]; then
      INSTALL_ADDON_HOST_LIST="$INSTALL_ADDON_HOST_LIST $VM_HOST"
   fi
done
if [ "$INSTALL_ADDON_HOST_LIST" != "" ]; then
   ROOT_DIR_NAME=$(basename $PADOGRID_HOME)
   TAR_BALL_GZ_NAME=$ROOT_DIR_NAME.tar.gz
   TAR_BALL_GZ_PATH=/tmp/$TAR_BALL_GZ_NAME
   VM_PADOGRID_HOME_PARENT_DIR="$(dirname "$VM_PADOGRID_HOME")"
   pushd $PADOGRID_HOME/.. > /dev/null 2>&1
   tar czf $TAR_BALL_GZ_PATH $ROOT_DIR_NAME
   popd > /dev/null 2>&1

   for VM_HOST in $INSTALL_ADDON_HOST_LIST; do
      echo "Deploying $ROOT_DIR_NAME to $VM_HOST..."
      if [ "$SIMULATE" == "true" ]; then
         echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "mkdir -p $VM_PADOGRID_HOME_PARENT_DIR"
         echo scp -q -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TAR_BALL_GZ_PATH $VM_USER@$VM_HOST:/tmp
         echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_HOME_PARENT_DIR --warning=no-unknown-keyword -xzf /tmp/$TAR_BALL_GZ_NAME; rm /tmp/$TAR_BALL_GZ_NAME"
      else
         ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "mkdir -p $VM_PADOGRID_HOME_PARENT_DIR"
         scp -q -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TAR_BALL_GZ_PATH $VM_USER@$VM_HOST:/tmp
         ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_HOME_PARENT_DIR --warning=no-unknown-keyword -xzf /tmp/$TAR_BALL_GZ_NAME; rm /tmp/$TAR_BALL_GZ_NAME"
      fi
   done
fi

echo ""

# Find all existing and new hosts
EXISTING_HOSTS=
NEW_HOSTS=
THIS_VM_HOSTNAME=`hostname`
COMMAND="[ -d "$BASE_DIR" ] && echo true || echo false"
EXISTING_HOST_COUNT=0
NEW_HOST_COUNT=0
ABS_PATH="$PADOGRID_WORKSPACE"
INITENV_COMMAND="[ -f "$VM_PADOGRID_WORKSPACES_HOME/initenv.sh" ] && echo true || echo false"
ADDONENV_COMMAND="[ -f "$VM_PADOGRID_WORKSPACES_HOME/.addonenv.sh" ] && echo true || echo false"
SETENV_COMMAND="[ -f "$VM_PADOGRID_WORKSPACES_HOME/setenv.sh" ] && echo true || echo false"

# Prepare rwe and workspace setenv.sh files for VMs
if [ ! -f "$PADOGRID_WORKSPACES_HOME/setenv_vm.sh" ]; then
   cp $PADOGRID_WORKSPACES_HOME/setenv.sh /tmp/workspaces_setenv.sh

   # Reset all exported variables
   cp $PADOGRID_WORKSPACE/setenv.sh /tmp/setenv.sh
   EXPORT_HOME_LIST_RWE=$(grep "export .*HOME=" /tmp/workspaces_setenv.sh | sed -e 's/^.*export //' -e 's/HOME=.*/HOME/')
   for i in $EXPORT_HOME_LIST_RWE; do
      sed -i$__SED_BACKUP -e "s/export $i=.*$/#export $i="\"\""/" -e 's/##/#/' /tmp/workspaces_setenv.sh
   done
   EXPORT_HOME_LIST_WORKSPACE=$(grep "export .*HOME=" /tmp/setenv.sh | sed -e 's/^.*export //' -e 's/HOME=.*/HOME/')
   for i in $EXPORT_HOME_LIST_WORKSPACE; do
      sed -i$__SED_BACKUP -e "s/export $i=.*$/#export $i="\"\""/" -e 's/##/#/' /tmp/setenv.sh
   done
   sed -i$__SED_BACKUP -e 's|^.*export PADOGRID_HOME=.*$|   export PADOGRID_HOME='\"${VM_PADOGRID_HOME}\"'|' /tmp/workspaces_setenv.sh
   sed -i$__SED_BACKUP -e 's|^.*export PADOGRID_HOME=.*$|   export PADOGRID_HOME='\"${VM_PADOGRID_HOME}\"'|' /tmp/setenv.sh

   VM_PADOGRID_ENV_BASE_PATH=$(dirname $(dirname $VM_PADOGRID_WORKSPACES_HOME))
   VM_PADOGRID_PRODUCTS_PATH="$VM_PADOGRID_ENV_BASE_PATH/products"
   VM_INSTALLED_PRODUCTS=""
   for VM_HOST in $__VM_HOSTS; do
      PRODUCT_DIR_NAME_LIST=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "ls $VM_PADOGRID_ENV_BASE_PATH/products")
      for i in $PRODUCT_DIR_NAME_LIST; do
        if [[ "$i" == **"padogrid_"** ]]; then
           PRODUCT_HOME_VAR="PADOGRID_HOME"
           VM_INSTALLED_PRODUCTS="$VM_INSTALLED_PRODUCTS padogrid"
        elif [[ "$i" == **"pado_"** ]]; then
           PRODUCT_HOME_VAR="PADO_HOME"
           VM_INSTALLED_PRODUCTS="$VM_INSTALLED_PRODUCTS pado"
        elif [[ "$i" == **"pado-desktop_"** ]]; then
           PRODUCT_HOME_VAR="PADODESKTOP_HOME"
           VM_INSTALLED_PRODUCTS="$VM_INSTALLED_PRODUCTS padodesktop"
        elif [[ "$i" == **"padoweb_"** ]]; then
           PRODUCT_HOME_VAR="PADOWEB_HOME"
           VM_INSTALLED_PRODUCTS="$VM_INSTALLED_PRODUCTS padoweb"
        elif [[ "$i" == **"geode"** ]]; then
           PRODUCT_HOME_VAR="GEODE_HOME"
           VM_INSTALLED_PRODUCTS="$VM_INSTALLED_PRODUCTS geode"
        elif [[ "$i" == **"hazelcast-enterprise"** ]]; then
           PRODUCT_HOME_VAR="HAZELCAST_HOME"
           VM_INSTALLED_PRODUCTS="$VM_INSTALLED_PRODUCTS hazelcast-enterprise"
        elif [[ "$i" == **"hazelcast-management-center"** ]]; then
           PRODUCT_HOME_VAR="HAZELCAST_MC_HOME"
           VM_INSTALLED_PRODUCTS="$VM_INSTALLED_PRODUCTS hazelcast-mc"
        elif [[ "$i" == **"hazelcast"** ]]; then
           PRODUCT_HOME_VAR="HAZELCAST_HOME"
           VM_INSTALLED_PRODUCTS="$VM_INSTALLED_PRODUCTS hazelcast"
       elif [[ "$i" == **"redis"** ]]; then
           PRODUCT_HOME_VAR="REDIS_HOME"
           VM_INSTALLED_PRODUCTS="$VM_INSTALLED_PRODUCTS redis"
        elif [[ "$i" == **"snappydata"** ]]; then
           PRODUCT_HOME_VAR="SNAPPYDATA_HOME"
           VM_INSTALLED_PRODUCTS="$VM_INSTALLED_PRODUCTS snappydata"
        elif [[ "$i" == **"spark"** ]]; then
           PRODUCT_HOME_VAR="SPARK_HOME"
           VM_INSTALLED_PRODUCTS="$VM_INSTALLED_PRODUCTS spark"
        elif [[ "$i" == **"kafka"** ]]; then
           PRODUCT_HOME_VAR="KAFKA_HOME"
           VM_INSTALLED_PRODUCTS="$VM_INSTALLED_PRODUCTS kafka"
        elif [[ "$i" == **"gemfire"** ]]; then
           PRODUCT_HOME_VAR="GEMFIRE_HOME"
           VM_INSTALLED_PRODUCTS="$VM_INSTALLED_PRODUCTS gemfire"
   #     elif [[ "$i" == **"coherence"** ]]; then
   #        PRODUCT_HOME_VAR="COHERENCE_HOME"
   #        VM_INSTALLED_PRODUCTS="$VM_INSTALLED_PRODUCTS coherence"
        elif [[ "$i" == **"jdk"** ]]; then
           PRODUCT_HOME_VAR="JAVA_HOME"
           VM_INSTALLED_PRODUCTS="$VM_INSTALLED_PRODUCTS java"
        fi
        VM_PRODUCT_HOME_PATH="$VM_PADOGRID_PRODUCTS_PATH/$i"
        sed -i$__SED_BACKUP -e "s|^.*export $PRODUCT_HOME_VAR=.*$|   export $PRODUCT_HOME_VAR="\"${VM_PRODUCT_HOME_PATH}\""|" /tmp/workspaces_setenv.sh
        sed -i$__SED_BACKUP -e "s|^.*export $PRODUCT_HOME_VAR=.*$|   export $PRODUCT_HOME_VAR="\"${VM_PRODUCT_HOME_PATH}\""|" /tmp/setenv.sh
      done
     break;
   done
   VM_INSTALLED_PRODUCTS=$(printf '%s\n' $VM_INSTALLED_PRODUCTS|sort -u)

   echo "Workspace sync: $WORKSPACE_NAME"
   if [ -f "$VM_PRIVATE_KEY_FILE" ]; then
      PRIVATE_KEY_FILE_NAME=$(basename $VM_PRIVATE_KEY_FILE)
   else
      PRIVATE_KEY_FILE_NAME=""
   fi
   pushd $ABS_PATH > /dev/null 2>&1
   tar czf /tmp/vm_sync.tar.gz .addonenv.sh *.sh $PRIVATE_KEY_FILE_NAME apps clusters lib plugins
   popd > /dev/null 2>&1
   for VM_HOST in $__VM_HOSTS; do
      HOSTNAME=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "hostname")
      if [ "$HOSTNAME" == "" ]; then
         echo "Invalid host [$VM_HOST]"
         continue
      elif [ "$HOSTNAME" == "$THIS_VM_HOSTNAME" ]; then
         continue
      fi

      echo "   Synchronizing $VM_HOST..."
      if [ "$SIMULATE" == "true" ]; then
         echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "mkdir -p $VM_PADOGRID_WORKSPACE"
         echo scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY /tmp/vm_sync.tar.gz $VM_USER@$VM_HOST:/tmp/
         echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_WORKSPACE --warning=no-unknown-keyword -xzf /tmp/vm_sync.tar.gz; rm /tmp/vm_sync.tar.gz"
         echo scp -q -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY /tmp/setenv.sh $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACE/
      else
         ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "mkdir -p $VM_PADOGRID_WORKSPACE"
         scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY /tmp/vm_sync.tar.gz $VM_USER@$VM_HOST:/tmp/
         ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_WORKSPACE --warning=no-unknown-keyword -xzf /tmp/vm_sync.tar.gz && rm /tmp/vm_sync.tar.gz"
         scp -q -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY /tmp/setenv.sh $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACE/
      fi

      # Configure the workspaces directory if not configured already
      INITENV_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$INITENV_COMMAND")
      ADDONENV_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$ADDONENV_COMMAND")
      SETENV_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$SETENV_COMMAND")

      if [[ "$INITENV_EXISTS" == *"false" ]]; then
         scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $PADOGRID_WORKSPACES_HOME/initenv.sh $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/
      fi
      if [[ "$ADDONENV_EXISTS" == *"false" ]]; then
         cp $PADOGRID_WORKSPACES_HOME/.addonenv.sh /tmp/.addonenv.sh
         if [ "$SIMULATE" == "true" ]; then
            echo scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY /tmp/.addonenv.sh $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/
         else
            scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY /tmp/.addonenv.sh $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/
         fi
      fi
      if [ "$RWE_SPECIFIED" == "true" ] || [[ "$SETENV_EXISTS" == *"false" ]]; then
         if [ "$SIMULATE" == "true" ]; then
            echo scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY /tmp/workspaces_setenv.sh $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/setenv.sh
         else
            scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY /tmp/workspaces_setenv.sh $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/setenv.sh
         fi
      fi
      if [ "$RWE_SPECIFIED" == "true" ]; then
         if [ "$SIMULATE" == "true" ]; then
            echo scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $PADOGRID_WORKSPACES_HOME/.*env.sh $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/
         else
            scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $PADOGRID_WORKSPACES_HOME/.*env.sh $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/
         fi
      fi
      # Update workspace metadata
      RWE=$(basename $PADOGRID_WORKSPACES_HOME)
      VM_RWE=$(basename $VM_PADOGRID_WORKSPACES_HOME)
      if [ "$SIMULATE" == "true" ]; then
         echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "[ ! -d ~/.padogrid/workspaces/$RWE ] && mkdir -p ~/.padogrid/workspaces/$VM_RWE"
         echo scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $HOME/.padogrid/workspaces/$RWE/$WORKSPACE $VM_USER@$VM_HOST:~/.padogrid/workspaces/$VM_RWE/
      else
         ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "[ ! -d ~/.padogrid/workspaces/$RWE ] && mkdir -p ~/.padogrid/workspaces/$VM_RWE"
         scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $HOME/.padogrid/workspaces/$RWE/$WORKSPACE $VM_USER@$VM_HOST:~/.padogrid/workspaces/$VM_RWE/
      fi
   done
   cp /tmp/setenv.sh $PADOGRID_WORKSPACE/setenv_vm.sh
fi

# Remove temp files
rm /tmp/vm_sync.tar.gz > /dev/null 2>&1
rm /tmp/setenv.sh*  > /dev/null 2>&1
rm /tmp/.addonenv.sh  > /dev/null 2>&1
rm /tmp/workspaces_setenv.sh*  > /dev/null 2>&1

# Update .bashrc
echo ""
echo "Updating remote '.bashrc' if needed..."
BASHRC_COMMAND="grep initenv.sh ~/.bashrc"
INIT_COMMAND="\"echo . ${VM_PADOGRID_WORKSPACES_HOME}/initenv.sh -quiet >> ~/.bashrc\""
for VM_HOST in $__VM_HOSTS; do
   if [ "$SIMULATE" == "true" ]; then
      echo PADOGRID_INIT_IN_BASHRC=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$BASHRC_COMMAND")
   else
      PADOGRID_INIT_IN_BASHRC=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$BASHRC_COMMAND")
   fi
   if [ "$PADOGRID_INIT_IN_BASHRC" == "" ]; then
      if [ "$SIMULATE" == "true" ]; then
         echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "\"$INIT_COMMAND\""
      else
         ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "\"$INIT_COMMAND\""
      fi
   fi
done

echo ""
echo "The following products are installed in the VMs. Make sure you have installed all the"
echo "required products before starting the cluster."
echo ""
for i in $PRODUCT_DIR_NAME_LIST; do
   echo "   $i"
done
echo ""
echo "To install a product, run 'vm_install -product <product_distribution_file>'."
echo ""

# Determine and display all VMs that do not have Java and the current cluster
# product installed.
if [[ "$VM_INSTALLED_PRODUCTS" != *"java"* ]]; then
   JAVA_DIR_NAME=$(basename $VM_JAVA_HOME)
   echo "------------------------------------------------------------------------------------------"
   echo -e "${CBrownOrange}WARNING:${CNone}"
   echo "   JDK is not installed in the VMs. The workspace will not be operational until you"
   echo "   have installed JDK."
   echo ""
   echo "To install Java in the VMs, download the correct version of JDK and execute 'vm_install'."
   echo "------------------------------------------------------------------------------------------"
fi
PRODUCT_TYPE=$PRODUCT
if [ "$CLUSTER_TYPE" == "gemfire" ]; then
   PRODUCT_TYPE="gemfire"
fi
if [[ "$VM_INSTALLED_PRODUCTS" != *"$PRODUCT_TYPE"* ]]; then
   echo "------------------------------------------------------------------------------------------"
   echo -e "${CBrownOrange}WARNING:${CNone}"
   echo "   The cluster product [$PRODUCT_TYPE] is not installed in the VMs. The workspace will"
   echo "   not be operational until you have installed the product."
   echo ""
   echo "To install the product in the VMs, download the correct version of the product and"
   echo "execute 'vm_install'."
   echo "------------------------------------------------------------------------------------------"
fi

echo -e "${CLightGreen}Workspace sync complete.${CNone}"
echo ""
if [ "$SIMULATE" == "true" ]; then
   echo "Simulation complete."
fi

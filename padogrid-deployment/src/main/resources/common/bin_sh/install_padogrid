#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2021 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
if [ -f "$SCRIPT_DIR/.addonenv.sh" ]; then
   . $SCRIPT_DIR/.addonenv.sh
else
   if [ "$1" == "-quiet" ]; then
      QUIET="true"
   else
      QUIET="false"
   fi
   if [ "$1" == "-?" ]; then
      HELP="true"
   else
      HELP="false"
   fi
fi

EXECUTABLE="`basename $0`"

# 
# Determine the PadoGrid environment base path. Default is "$HOME/Padogrid".
#
if [ "$PADOGRID_ENV_BASE_PATH" == "" ]; then
   if [ "$PADOGRID_HOME" == "" ]; then
      PADOGRID_ENV_BASE_PATH="$HOME/Padogrid"
   else
      PADOGRID_ENV_BASE_PATH="$(dirname $(dirname $PADOGRID_WORKSPACES_HOME))"
   fi
fi      

# If the base path is not writable then set it to the default PadoGrid base path.
if [ ! -w "$PADOGRID_ENV_BASE_PATH" ]; then
   PADOGRID_ENV_BASE_PATH="$HOME/Padogrid"
fi

#
# NOTE: To make this command independent, some of the functions defined in the file are duplicated
#       from the .utilenv.sh and .argenv.sh files.
#

CNone='\033[0m' # No Color
CLightGreen='\033[1;32m'
CUnderline='\033[4m'
CUrl=$CBlue$CUnderline

PADOGRID_DOWNLOAD_URL="https://github.com/padogrid/padogrid/releases"
GEODE_DOWNLOAD_URL="https://archive.apache.org/dist/geode/"
HAZELCAST_ENTERPRISE_DOWNLOAD_URL="https://hazelcast.com/get-started/download/"
HAZELCAST_OSS_DOWNLOAD_URL="https://hazelcast.org/imdg/download/archives/#hazelcast-imdg"
HAZELCAST_MANAGEMENT_CENTER_DOWNLOAD_URL="https://hazelcast.com/get-started/download/"
JET_ENTERPRISE_DOWNLOAD_URL="https://hazelcast.com/get-started/download/"
JET_OSS_DOWNLOAD_URL="https://github.com/hazelcast/hazelcast-jet/releases"
JET_MANAGEMENT_CENTER_DOWNLOAD_URL="https://jet-start.sh/download"
SNAPPYDATA_DOWNLOAD_URL="https://github.com/TIBCOSoftware/snappydata/releases"
SPARK_DOWNLOAD_URL="https://archive.apache.org/dist/spark/"

__options()
{
   echo "-quiet -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

NAME
   $EXECUTABLE - Install Padogrid and downloable products

OPTIONS
   -quiet
             If specified, then it runs in non-internactive mode. By default, it installs all of
             the latest products if not installed and creates an RWE if it does not exist.

SYNOPSIS
   $EXECUTABLE [-?]

DESCRIPTION
   Installs PadoGrid and downloadable products. This command downloads one or more selected products
   and installs them in the PadoGrid environment base directory. If the base directory is not
   specified then it defaults to $HOME/Padogrid.

   Your current PadoGrid environment base directory path is

      $PADOGRID_ENV_BASE_PATH

   The base directory has the following structure and contains all of PadoGrid files including workspaces.

      .
      ├── downloads
      ├── products
      ├── snapshots
      └── workspaces

      - The 'downloads' directory contains the files downloaded by this command.
      - The 'products' directory contains the installed products.
      - The 'snapshots' directory contains PadoGrid snapshot versions.
      - The 'workspaces' directory contains PadoGrid RWEs and their workspaces.

   The following products are downlodable and you can install them using this command.

EOF

echo -e "      - PadoGrid                    ${CUrl}$PADOGRID_DOWNLOAD_URL${CNone}"
echo -e "      - Apache Geode                ${CUrl}$GEODE_DOWNLOAD_URL${CNone}"
echo -e "      - Hazelcast Enterprise        ${CUrl}$HAZELCAST_ENTERPRISE_DOWNLOAD_URL${CNone}"
echo -e "      - Hazelcst OSS                ${CUrl}$HAZELCAST_OSS_DOWNLOAD_URL${CNone}"
echo -e "      - Hazelcast Management Center ${CUrl}$HAZELCAST_MANAGEMENT_CENTER_DOWNLOAD_URL${CNone}"
echo -e "      - Jet Enterprise              ${CUrl}$JET_ENTERPRISE_DOWNLOAD_URL${CNone}"
echo -e "      - Jet OSS                     ${CUrl}$JET_OSS_DOWNLOAD_URL${CNone}"
echo -e "      - Jet Management Center       ${CUrl}$JET_MANAGEMENT_CENTER_DOWNLOAD_URL${CNone}"
echo -e "      - TIBCO SnappyData            ${CUrl}$SNAPPYDATA_DOWNLOAD_URL${CNone}"
echo -e "      - Apache Spark                ${CUrl}$SPARK_DOWNLOAD_URL${CNone}"

cat <<EOF

   The following products are not downlodable due to their sign-in requirements. You must manually
   download and install them. See the PadoGrid manual for instructions.

EOF
echo -e "      - Oracle Coherence ${CUrl}https://www.oracle.com/middleware/technologies/coherence-downloads.html${CNone}"
echo -e "      - TIBCO ComputeDB  ${CUrl}https://edelivery.tibco.com/storefront/index.ep${CNone}"
echo -e "      - VMware GemFire   ${CUrl}https://network.pivotal.io/products/pivotal-gemfire${CNone}"
cat <<EOF

   This command does not install Java. It expects that you have already installed JDK 1.8+ and prompts for
   the JAVA_HOME path. If you haven't installed it, then you can donwload it from one of the following sites.

EOF
echo -e "      - Oracle JDK      ${CUrl}https://www.oracle.com/java/technologies/javase-downloads.html${CNone}"
echo -e "      - Oracle Open JDK ${CUrl}https://jdk.java.net/${CNone}"
echo -e "      - Azule Open JDK  ${CUrl}https://www.azul.com/downloads/${CNone}"
cat <<EOF

SEE ALSO
EOF
   printSeeAlsoList "change_version show_products update_products" $EXECUTABLE
   exit
fi

cat <<EOF

This command installs the following downlodable products:

EOF

echo -e "[0] PadoGrid                    ${CUrl}$PADOGRID_DOWNLOAD_URL${CNone}"
echo -e "[1] Apache Geode                ${CUrl}$GEODE_DOWNLOAD_URL${CNone}"
echo -e "[3] Hazelcast Enterprise        ${CUrl}$HAZELCAST_ENTERPRISE_DOWNLOAD_URL${CNone}"
echo -e "[2] Hazelcst OSS                ${CUrl}$HAZELCAST_OSS_DOWNLOAD_URL${CNone}"
echo -e "[4] Hazelcast Management Center ${CUrl}$HAZELCAST_MANAGEMENT_CENTER_DOWNLOAD_URL${CNone}"
echo -e "[6] Jet Enterprise              ${CUrl}$JET_ENTERPRISE_DOWNLOAD_URL${CNone}"
echo -e "[5] Jet OSS                     ${CUrl}$JET_OSS_DOWNLOAD_URL${CNone}"
echo -e "[7] Jet Management Center       ${CUrl}$JET_MANAGEMENT_CENTER_DOWNLOAD_URL${CNone}"
echo -e "[8] TIBCO SnappyData            ${CUrl}$SNAPPYDATA_DOWNLOAD_URL${CNone}"
echo -e "[9] Apache Spark                ${CUrl}$SPARK_DOWNLOAD_URL${CNone}"

cat <<EOF

The following products are not included in this command to their download sign-in requirements.
To install them, you must download them manually. Make sure to install them in the PadoGrid
products directory. See the PadoGrid manual for instructions.

EOF
echo -e "[0] Oracle Coherence ${CUrl}https://www.oracle.com/middleware/technologies/coherence-downloads.html${CNone}"
echo -e "[1] TIBCO ComputeDB  ${CUrl}https://edelivery.tibco.com/storefront/index.ep${CNone}"
echo -e "[2] VMware GemFire   ${CUrl}https://network.pivotal.io/products/pivotal-gemfire${CNone}"
cat <<EOF

Note that this command does not install Java. It expects that you have already installed JDK 1.8+ and
prompts for the JAVA_HOME path. If you haven't installed it, then you can donwload it from one of the
following sites.

EOF
echo -e "[0] Oracle JDK      ${CUrl}https://www.oracle.com/java/technologies/javase-downloads.html${CNone}"
echo -e "[1] Oracle Open JDK ${CUrl}https://jdk.java.net/${CNone}"
echo -e "[2] Azule Open JDK  ${CUrl}https://www.azul.com/downloads/${CNone}"
echo ""

function getLatestProductVersion
{
   local ALL_VERSIONS="$1"
   local lmajor=0
   local lminor=0
   local lupdate=-1
   for i in $ALL_VERSIONS; do
      local periods="${i//[^\.]}"
      local period_count=${#periods}
      if [ $period_count -eq 2 ]; then
         local major=${i%%\.*}
         local minor=${i%\.*}
         local minor=${minor#*\.}
         local update=${i##*\.}
      else
         local major=${i%%\.*}
         local minor=${i#*\.}
         local update=-1
      fi
      #echo lmajor=$lmajor, lminor=$lminor, lupdate=$lupdate
      if [ $lmajor -lt $major ]; then
        lmajor=$major
        lminor=$minor
        lupdate=$update
      elif [ $lmajor -eq $major ]; then
        if [ $lminor -lt $minor ]; then
           lminor=$minor
           lupdate=$update
        elif [ $lminor -eq $minor ]; then
           if [ $lupdate -eq -1 ]; then
              lupdate=$update
           elif [ $lupdate -lt $update ]; then
              lupdate=$update
           fi
        fi
      fi
   done
   if [ $lupdate -eq -1 ]; then
      echo "$lmajor.$lminor"
   else
      echo "$lmajor.$lminor.$lupdate"
   fi
}

#
# Returns trimmed string
# @param String to trim
#
function trimString
{
    local var="$1"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"   
    echo -n "$var"
}

#
# Returns a string list with all duplicate words removed from the specified string list.
# @param stringList String list of words separated by spaces
#
function unique_words
{
   local __words=$1
   local  __resultvar=$2
   local __visited
   local __unique_words
   local __i
   local __j

   # remove all repeating hosts
   for __i in $__words; do
      __visited=false
      for __j in $__unique_words; do
         if [ "$__i" == "$__j" ]; then
            __visited=true
         fi
      done
      if [ "$__visited" == "false" ]; then
         __unique_words="$__unique_words $__i"
      fi
   done

   if [[ "$__resultvar" ]]; then
      eval $__resultvar="'$__unique_words'"
      #echo `trimString "$__resultvar"`
   else
     echo `trimString "$__unique_words"`
   fi
}

function getDownloadablePadogridVersions
{
  local ALL_PADOGRID_VERSIONS=$(curl -s $PADOGRID_DOWNLOAD_URL |grep "padogrid_" | grep '\.tar\.gz' | sed -e 's/.*padogrid_//' -e 's/\.tar\.gz.*//')
  unique_words "$ALL_PADOGRID_VERSIONS"
}

function getDownloadableGeodeVersions
{
   local ALL_GEODE_VERSIONS=$(curl -sL $GEODE_DOWNLOAD_URL |grep img | grep -v unknown | grep -v incubating | sed -e 's/.*>1./1./' -e 's/\/.*//' | grep -v img)
   unique_words "$ALL_GEODE_VERSIONS"
}

function getDownloadableHazelcastEnterpriseVersions
{
   local ALL_HAZELCAST_ENTERPRISE_VERSIONS=$(curl -s $HAZELCAST_ENTERPRISE_DOWNLOAD_URL | grep "hazelcast-enterprise-" | grep "tar.gz" | sed -e 's/.*hazelcast-enterprise-//' -e 's/\.tar\.gz.*//')
   unique_words "$ALL_HAZELCAST_ENTERPRISE_VERSIONS"
}

function getDownloadableHazelcastOssVersions
{
  local ALL_HAZELCAST_OSS_VERSIONS=$(curl -s $HAZELCAST_OSS_DOWNLOAD_URL | grep "IMDG 4" | sed -e 's/.*IMDG 4/4/' -e 's/<.*//')
  unique_words "$ALL_HAZELCAST_OSS_VERSIONS"
}

function getDownloadableHazelcastManCenterVersions
{
  local ALL_HAZELCAST_MANAGEMENT_CENTER_VERSIONS=$(curl -s $HAZELCAST_MANAGEMENT_CENTER_DOWNLOAD_URL | grep hazelcast-management-center | grep "tar.gz" |  sed -e 's/.*hazelcast-management-center-//' -e 's/\.tar\.gz.*//')
  unique_words "$ALL_HAZELCAST_MANAGEMENT_CENTER_VERSIONS"
}

function getDownloadableJetEnterpriseVersions
{
   local ALL_JET_ENTERPRISE_VERSIONS=$(curl -s $JET_ENTERPRISE_DOWNLOAD_URL | grep "hazelcast-jet-enterprise-" | grep "tar.gz" | sed -e 's/.*hazelcast-jet-enterprise-//' -e 's/\.tar\.gz.*//')
   unique_words "$ALL_JET_ENTERPRISE_VERSIONS"
}

function getDownloadableJetOssVersions
{
   local ALL_JET_OSS_VERSIONS=$(curl -s $JET_OSS_DOWNLOAD_URL |grep "hazelcast-jet-" | grep '\.tar\.gz' | sed -e 's/.*hazelcast-jet-//' -e 's/\.tar\.gz.*//' | grep -v elastic)
   unique_words "$ALL_JET_OSS_VERSIONS"
}

function getDownloadableJetManCenterVersions
{
   local V1=$(curl -s $JET_MANAGEMENT_CENTER_DOWNLOAD_URL | grep "hazelcast/hazelcast-jet/releases/download" | sed -e 's/hazelcast-jet-management-center-/\'$'\n/g' |grep tar.gz | sed -e 's/\.tar\.gz.*//' | grep -v span)
   local V2=$(curl -s $JET_MANAGEMENT_CENTER_DOWNLOAD_URL| grep "hazelcast/hazelcast-jet/releases/download" | sed -e 's/hazelcast-management-center-/\'$'\n/g' |grep tar.gz | sed -e 's/\.tar\.gz.*//' | grep -v span)
   local ALL_JET_MANAGEMENT_CENTER_VERSIONS="$V2 $V1"
   unique_words "$ALL_JET_MANAGEMENT_CENTER_VERSIONS"
}

function getDownloadableSnappyDataVersions
{
   local ALL_SNAPPYDATA_VERSIONS=$(curl -s $SNAPPYDATA_DOWNLOAD_URL | grep "snappydata-" | grep "tar.gz" | grep -v ec2 | sed -e 's/.*snappydata-//' -e 's/\.tar\.gz.*//')
   unique_words "$ALL_SNAPPYDATA_VERSIONS"
}

function getDownloadableSparkVersions
{
   local ALL_SPARK_VERSIONS=$(curl -s $SPARK_DOWNLOAD_URL |grep img | grep -v unknown | grep -v incubating  | grep -v preview |  sed -e 's/.*spark-/spark-/' -e 's/\/<.*//' -e 's/spark-//' | grep -v img)
   unique_words "$ALL_SPARK_VERSIONS"
}

#
# Returns the sorted list of the specified list that contains product versions
# @param versionList
#
function sortVersionList
{
   local VERSION_LIST="$1"
   local TMP_FILE=/tmp/$EXECUTABLE-$(date "+%m%d%y%H%M%S").txt
   echo 
   echo "" > $TMP_FILE
   if [ -f $TMP_FILE ]; then
      rm $TMP_FILE
   fi
   touch $TMP_FILE
   for i in $VERSION_LIST; do
      echo "$i" >> $TMP_FILE
   done
   SORTED_VERSIONS=$(sort -rV $TMP_FILE)
   rm $TMP_FILE
   echo $SORTED_VERSIONS
}

#
# Determines versions of all installed products by scanning the products base directory.
# This function sets the following arrays.
#    PADOGRID_VERSIONS
#    GEMFIRE_VERSIONS
#    GEODE_VERSIONS
#    HAZELCAST_ENTERPRISE_VERSIONS
#    HAZELCAST_OSS_VERSIONS
#    HAZELCAST_MANAGEMENT_CENTER_VERSIONS
#    JET_ENTERPRISE_VERSIONS
#    JET_OSS_VERSIONS
#    JET_MANAGEMENT_CENTER_VERSIONS
#    SNAPPYDATA_VERSIONS
#    SPARK_VERSIONS
#
# @required PADOGRID_ENV_BASE_PATH 
#
function determineInstalledProductVersions
{
   PADOGRID_VERSIONS=""
   GEMFIRE_VERSIONS=""
   GEODE_VERSIONS=""
   HAZELCAST_ENTERPRISE_VERSIONS=""
   HAZELCAST_MANAGEMENT_CENTER_VERSIONS=""
   JET_ENTERPRISE_VERSIONS=""
   JET_OSS_VERSIONS=""
   HAZELCAST_OSS_VERSIONS=""
   JET_MANAGEMENT_CENTER_VERSIONS=""
   SNAPPYDATA_VERSIONS=""
   SPARK_VERSIONS=""

   if [ -d "$PADOGRID_ENV_BASE_PATH/products" ]; then
      pushd $PADOGRID_ENV_BASE_PATH/products > /dev/null 2>&1

      # To prevent wildcard not expanding in a for-loop if files do not exist
      shopt -s nullglob

      local __versions
      local henterv hmanv jenterv jmanv jossv hossv

      # PadoGrid
      __versions=""
      for i in padogrid_*; do
         __version=${i#padogrid_}
         __versions="$__versions $__version "
      done
      PADOGRID_VERSIONS=$(sortVersionList "$__versions")

      # GemFire
      __versions=""
      for i in pivotal-gemfire-*; do
         __version=${i#pivotal-gemfire-}
         __versions="$__versions $__version "
      done
      GEMFIRE_VERSIONS=$(sortVersionList "$__versions")

      # Geode
      __versions=""
      for i in apache-geode-*; do
         __version=${i#apache-geode-}
         __versions="$__versions $__version "
      done
      GEODE_VERSIONS=$(sortVersionList "$__versions")

      # Hazelcast OSS, Enterprise, Hazelcast Management Center, Jet OSS, Jet Enterprise, Jet Management Center
      local hossv henterv hmanv jossv jenterv jmanv
      for i in hazelcast-*; do
         if [[ "$i" == "hazelcast-enterprise-"** ]]; then
            __version=${i#hazelcast-enterprise-}
            henterv="$henterv $__version"
         elif [[ "$i" == "hazelcast-management-center-"** ]]; then
            __version=${i#hazelcast-management-center-}
            hmanv="$hmanv $__version"
         elif [[ "$i" == "hazelcast-jet-enterprise-"** ]]; then
            __version=${i#hazelcast-jet-enterprise-}
            jenterv="$jenterv $__version"
         elif [[ "$i" == "hazelcast-jet-management-center-"** ]]; then
            __version=${i#hazelcast-jet-management-center-}
            jmanv="$jmanv $__version"
         elif [[ "$i" == "hazelcast-jet-"** ]]; then
            __version=${i#hazelcast-jet-}
            jossv="$jossv $__version"
         elif [[ "$i" == "hazelcast-"** ]]; then
            __version=${i#hazelcast-}
            hossv="$hossv $__version"
         fi
      done

      HAZELCAST_ENTERPRISE_VERSIONS=$(sortVersionList "$henterv")
      HAZELCAST_MANAGEMENT_CENTER_VERSIONS=$(sortVersionList "$hmanv")
      JET_ENTERPRISE_VERSIONS=$(sortVersionList "$jenterv")
      JET_OSS_VERSIONS=$(sortVersionList "$jossv")
      HAZELCAST_OSS_VERSIONS=$(sortVersionList "$hossv")

      # Hazelcast/Jet  management center merged starting 4.2021.02
      for i in ${HAZELCAST_MANAGEMENT_CENTER_VERSIONS[@]}; do
         if [[ "$i" == "4.2021"* ]]; then
            jmanv="$i $jmanv"
         fi
      done
      JET_MANAGEMENT_CENTER_VERSIONS=$(sortVersionList "$jmanv")

      # SnappyData
      __versions=""
      for i in snappydata-*; do
         __version=${i#snappydata-}
         #__version=${__version%-bin}
         __versions="$__versions $__version "
      done
      SNAPPYDATA_VERSIONS=$(sortVersionList "$__versions")

      # Spark
      __versions=""
      for i in spark-*; do
         __version=${i#spark-}
         __version=${__version%-bin}
         __versions="$__versions $__version "
      done
      SPARK_VERSIONS=$(sortVersionList "$__versions")

      popd > /dev/null 2>&1
            
   fi
}

# 
# Returns "true" if number, else "false"
# @param number
#
function isNumber
{
   num=$1
   [ ! -z "${num##*[!0-9]*}" ] && echo "true" || echo "false";
}

#
# Prompts user for the product version to install.
#
# @required PRODUCT_NAME              Product name
# @required PRODUCT_DOWNLOAD_VERSIONS Downlodable product versions
# @required INSTALLED_VERSIONS        Installed product versions
# @return INSTALL_VERSION             Returns the user-entered version to install. If this variable value is empty then the
#                                     user decided not to install.
#
function doUserInput
{
   INSTALL_VERSION=""

   local __INDEX=0
   local __LEN=${#PRODUCT_DOWNLOAD_VERSIONS[@]}
   let __LAST_INDEX=__LEN-1
   for i in ${PRODUCT_DOWNLOAD_VERSIONS[@]}; do
      __INSTALLED="false"
      for j in ${INSTALLED_VERSIONS[@]}; do
         if [ "$i" == "$j" ]; then
            __INSTALLED="true"
            break;
         fi
      done
      if [ "$__INSTALLED" == "true" ]; then
         echo "   [$__INDEX] $i [installed]"
      else
         echo "   [$__INDEX] $i"
      fi
      let __INDEX=__INDEX+1
   done

   local __INNER_LOOP=true
   local __INSTALLED="false"
   while [ "$__INNER_LOOP" == "true" ]; do
      read -p "Enter a version to install or leave blank to skip: " INPUT
      if [ "$INPUT" == "" ]; then
         break;
      else
         if [ "$(isNumber $INPUT)" == "true" ]; then
            if [ $INPUT -lt 0 ] || [ $INPUT -gt $__LAST_INDEX ]; then
               echo "Invalid number. Enter [0, $__LAST_INDEX]."
               continue;
            fi
         fi
         __INSTALLED="false"
         if [ "$(isNumber $INPUT)" == "true" ]; then
            INSTALL_VERSION=${PRODUCT_DOWNLOAD_VERSIONS[$INPUT]}
         else
            INSTALL_VERSION=$INPUT
         fi
         for j in ${INSTALLED_VERSIONS[@]}; do
            if [ "$INSTALL_VERSION" == "$j" ]; then
               __INSTALLED="true"
               break;
            fi
         done
         if [ "$__INSTALLED" == "true" ]; then
            local __REDO="true"
            while [ "$__REDO" == "true" ]; do
               read -p "$INSTALL_VERSION is already installed. Do you want to reinstall (y/[n])? " INPUT
               case $INPUT in
                  [Yy]* ) __REDO="false"; __INNER_LOOP="false";;
                  [Nn]* ) __REDO="false"; INSTALL_VERSION="";;
               esac
            done
         else
            if [ "$INSTALL_VERSION" != "" ]; then
               local __VALID_VERSION="false"
               for i in ${PRODUCT_DOWNLOAD_VERSIONS[@]}; do
                  if [ "$i" == $INSTALL_VERSION ]; then
                     __VALID_VERSION="true"
                     break;
                  fi
               done

               if [ "$__VALID_VERSION" == "false" ]; then
                  echo "$INSTALL_VERSION is invalid."
                  __INNER_LOOP="true"
               else
                  __INNER_LOOP="false"
               fi
            fi
         fi
      fi
   done
   if [ "$INSTALL_VERSION" == "" ]; then
      echo -e "$PRODUCT_NAME Selected: ${CBrownOrange}Skipped${CNone}"
   else
      echo -e "$PRODUCT_NAME Selected: ${CLightGreen}$INSTALL_VERSION${CNone}"
   fi
}

#
# Scan downloadable product versions
#
echo ""
echo "Scanning donwloadable products... Please wait."
echo ""

# Turn off the enter key while waiting
stty igncr

PADOGRID_DOWNLOAD_VERSIONS=($(sortVersionList "$(getDownloadablePadogridVersions)"))
GEODE_DOWNLOAD_VERSIONS=($(sortVersionList "$(getDownloadableGeodeVersions)"))
HAZELCAST_ENTERPRISE_DOWNLOAD_VERSIONS=($(getDownloadableHazelcastEnterpriseVersions))
HAZELCAST_OSS_DOWNLOAD_VERSIONS=($(getDownloadableHazelcastOssVersions))
HAZELCAST_MANAGEMENT_CENTER_DOWNLOAD_VERSIONS=($(getDownloadableHazelcastManCenterVersions))
JET_ENTERPRISE_DOWNLOAD_VERSIONS=($(getDownloadableJetEnterpriseVersions))
JET_OSS_DOWNLOAD_VERSIONS=($(getDownloadableJetOssVersions))
SNAPPYDATA_DOWNLOAD_VERSIONS=($(getDownloadableSnappyDataVersions))
SPARK_DOWNLOAD_VERSIONS=($(sortVersionList "$(getDownloadableSparkVersions)"))

# Hazelcast/Jet  management center merged starting 4.2021.02
JET_MANAGEMENT_CENTER_DOWNLOAD_VERSIONS=$(getDownloadableJetManCenterVersions)
for i in $HAZELCAST_MANAGEMENT_CENTER_DOWNLOAD_VERSIONS; do
   if [[ "$i" == "4.2021"* ]]; then
      JET_MANAGEMENT_CENTER_DOWNLOAD_VERSIONS="$i $JET_MANAGEMENT_CENTER_DOWNLOAD_VERSIONS"
   fi
done
JET_MANAGEMENT_CENTER_DOWNLOAD_VERSIONS=($(sortVersionList "$JET_MANAGEMENT_CENTER_DOWNLOAD_VERSIONS"))

# Enable the enter key
stty -igncr

# Version variables set by user inputs
PADOGRID_VERSION=""
GEODE_VERSION=""
HAZELCAST_ENTERPRISE_VERSION=""
HAZELCAST_OSS_VERSION=""
HAZELCAST_MANAGEMENT_CENTER_VERSION=""
JET_ENTERPRISE_VERSION=""
JET_OSS_VERSION=""
JET_MANAGEMENT_CENTER_VERSION=""
SNAPPYDATA_VERSION=""
SPARK_VERSION=""

if [ "$QUIET" == "true" ]; then
   # Set to the latest versions
   PADOGRID_VERSION=${PADOGRID_DOWNLOAD_VERSIONS[0]}
   GEODE_VERSION=${GEODE_DOWNLOAD_VERSIONS[0]}
   HAZELCAST_ENTERPRISE_VERSION=${HAZELCAST_ENTERPRISE_DOWNLOAD_VERSIONS[0]}
   HAZELCAST_OSS_VERSION=${HAZELCAST_OSS_DOWNLOAD_VERSIONS[0]}
   HAZELCAST_MANAGEMENT_CENTER_VERSION=${HAZELCAST_MANAGEMENT_CENTER_DOWNLOAD_VERSIONS[0]}
   JET_ENTERPRISE_VERSION=${JET_ENTERPRISE_DOWNLOAD_VERSIONS[0]}
   JET_OSS_VERSION=${JET_OSS_DOWNLOAD_VERSIONS[0]}
   JET_MANAGEMENT_CENTER_VERSION=${JET_MANAGEMENT_CENTER_DOWNLOAD_VERSIONS[0]}
   SNAPPYDATA_VERSION=${SNAPPYDATA_DOWNLOAD_VERSIONS[0]}
   SPARK_VERSION=${SPARK_DOWNLOAD_VERSIONS[0]}

   echo "Installing the latest products versions as follows:"
   echo ""
   echo "PadoGrid             $PADOGRID_VERSION"
   echo "Geode                $GEODE_VERSION"
   echo "Hazelcast Enterprise $HAZELCAST_ENTERPRISE_VERSION"
   echo "Hazelcast OSS        $HAZELCAST_OSS_VERSION"
   echo "Hazelcast Man Center $HAZELCAST_MANAGEMENT_CENTER_VERSION"
   echo "Jet Enterprise       $JET_ENTERPRISE_VERSION"
   echo "Jet OSS              $JET_OSS_VERSION"
   echo "Jet Man Center       $JET_MANAGEMENT_CENTER_VERSION"
   echo "SnappyData           $SNAPPYDATA_VERSION"
   echo "Spark                $SPARK_VERSION"
   echo ""
else
# Get user inputs
REDO="true"
while [ "$REDO" == "true" ]; do

   INSTALL_COUNT=0

   REDO=true
   INNER_LOOP=true
   while [ "$INNER_LOOP" == "true" ]; do
      echo "Enter the PadoGrid environment base directory path. All of the products will be installed in this directory."
      echo "[$PADOGRID_ENV_BASE_PATH]":
      read -p "" INPUT
      if [ "$INPUT" == "" ]; then
         __BASE_PATH="$PADOGRID_ENV_BASE_PATH"
      else
         __BASE_PATH="$INPUT"
      fi
      if [ ! -d "$__BASE_PATH" ]; then
         if [ -f "$__BASE_PATH" ]; then
            echo "Invalid path. The specified path exists and is not a directory."
            continue;
         fi
      fi
      __parent=$(dirname "$__BASE_PATH")
      while [ "$__parent" != "/" ] && [ ! -w "$__parent" ]; do
         __parent=$(dirname "$__parent")
      done
      if [ ! -w "$__parent" ]; then
         echo "Invalid path. You do not have wirte permissions."
         continue;
      fi
      INNER_LOOP=false
      PADOGRID_ENV_BASE_PATH="$__BASE_PATH"
   done

   echo ""
   echo -e "PadoGrid environment base directory: ${CLightGreen}$PADOGRID_ENV_BASE_PATH${CNone}"
   echo ""

   # Get local installations
   determineInstalledProductVersions

   # PadoGrid
   PRODUCT_NAME="PadoGrid"
   PRODUCT_DOWNLOAD_VERSIONS=("${PADOGRID_DOWNLOAD_VERSIONS[@]}")
   INSTALLED_VERSIONS=$PADOGRID_VERSIONS
   echo -e "PadoGrid ${CUrl}$PADOGRID_DOWNLOAD_URL${CNone}"
   doUserInput
   if [ "$INSTALL_VERSION" != "" ]; then
      let INSTALL_COUNT=INSTALL_COUNT+1
   fi
   PADOGRID_VERSION=$INSTALL_VERSION
   echo ""

   # Geode
   PRODUCT_NAME="Geode"
   PRODUCT_DOWNLOAD_VERSIONS=("${GEODE_DOWNLOAD_VERSIONS[@]}")
   INSTALLED_VERSIONS=$GEODE_VERSIONS
   echo -e "Geode ${CUrl}$GEODE_DOWNLOAD_URL${CNone}"
   doUserInput
   if [ "$INSTALL_VERSION" != "" ]; then
      let INSTALL_COUNT=INSTALL_COUNT+1
   fi
   GEODE_VERSION=$INSTALL_VERSION
   echo ""

   # Hazelcast Enterprise
   PRODUCT_NAME="Hazelcast Enterprise"
   PRODUCT_DOWNLOAD_VERSIONS=("${HAZELCAST_ENTERPRISE_DOWNLOAD_VERSIONS[@]}")
   INSTALLED_VERSIONS=$HAZELCAST_ENTERPRISE_VERSIONS
   echo -e "Hazelcast Enterprise ${CUrl}$HAZELCAST_ENTERPRISE_DOWNLOAD_URL${CNone}"
   doUserInput
   if [ "$INSTALL_VERSION" != "" ]; then
      let INSTALL_COUNT=INSTALL_COUNT+1
   fi
   HAZELCAST_ENTERPRISE_VERSION=$INSTALL_VERSION
   echo ""

   # Hazelcast OSS
   PRODUCT_NAME="Hazelcast OSS"
   PRODUCT_DOWNLOAD_VERSIONS=("${HAZELCAST_OSS_DOWNLOAD_VERSIONS[@]}")
   INSTALLED_VERSIONS=$HAZELCAST_OSS_VERSIONS
   echo -e "Hazelcast OSS ${CUrl}$HAZELCAST_OSS_DOWNLOAD_URL${CNone}"
   doUserInput
   if [ "$INSTALL_VERSION" != "" ]; then
      let INSTALL_COUNT=INSTALL_COUNT+1
   fi
   HAZELCAST_OSS_VERSION=$INSTALL_VERSION
   echo ""

   # Hazelcast Management Center
   PRODUCT_NAME="Hazelcast Management Center"
   PRODUCT_DOWNLOAD_VERSIONS=("${HAZELCAST_MANAGEMENT_CENTER_DOWNLOAD_VERSIONS[@]}")
   INSTALLED_VERSIONS=$HAZELCAST_MANAGEMENT_CENTER_VERSIONS
   echo -e "Hazelcast Management Center ${CUrl}$HAZELCAST_MANAGEMENT_CENTER_DOWNLOAD_URL${CNone}"
   doUserInput
   if [ "$INSTALL_VERSION" != "" ]; then
      let INSTALL_COUNT=INSTALL_COUNT+1
   fi
   HAZELCAST_MANAGEMENT_CENTER_VERSION=$INSTALL_VERSION
   echo ""

   # Jet Enterprise
   PRODUCT_NAME="Jet Enterprise"
   PRODUCT_DOWNLOAD_VERSIONS=("${JET_ENTERPRISE_DOWNLOAD_VERSIONS[@]}")
   INSTALLED_VERSIONS=$JET_ENTERPRISE_VERSIONS
   echo -e "Jet Enterprise ${CUrl}$JET_ENTERPRISE_DOWNLOAD_URL${CNone}"
   doUserInput
   if [ "$INSTALL_VERSION" != "" ]; then
      let INSTALL_COUNT=INSTALL_COUNT+1
   fi
   JET_ENTERPRISE_VERSION=$INSTALL_VERSION
   echo ""

   # Jet OSS
   PRODUCT_NAME="Jet OSS"
   PRODUCT_DOWNLOAD_VERSIONS=("${JET_OSS_DOWNLOAD_VERSIONS[@]}")
   INSTALLED_VERSIONS=$JET_OSS_VERSIONS
   echo -e "Jet OSS ${CUrl}$JET_OSS_DOWNLOAD_URL${CNone}"
   doUserInput
   if [ "$INSTALL_VERSION" != "" ]; then
      let INSTALL_COUNT=INSTALL_COUNT+1
   fi
   JET_OSS_VERSION=$INSTALL_VERSION
   echo ""

   # Jet Management Center
   PRODUCT_NAME="Jet Management Center"
   PRODUCT_DOWNLOAD_VERSIONS=("${JET_MANAGEMENT_CENTER_DOWNLOAD_VERSIONS[@]}")
   INSTALLED_VERSIONS=$JET_MANAGEMENT_CENTER_VERSIONS
   echo -e "Jet Management Center ${CUrl}$JET_MANAGEMENT_CENTER_DOWNLOAD_URL${CNone}"
   doUserInput
   if [ "$INSTALL_VERSION" != "" ]; then
      let INSTALL_COUNT=INSTALL_COUNT+1
   fi
   JET_MANAGEMENT_CENTER_VERSION=$INSTALL_VERSION
   echo ""

   # SnappyData
   PRODUCT_NAME="SnappyData"
   PRODUCT_DOWNLOAD_VERSIONS=("${SNAPPYDATA_DOWNLOAD_VERSIONS[@]}")
   INSTALLED_VERSIONS=$SNAPPYDATA_VERSIONS
   echo -e "SnappyData ${CUrl}$SNAPPYDATA_DOWNLOAD_URL${CNone}"
   doUserInput
   if [ "$INSTALL_VERSION" != "" ]; then
      let INSTALL_COUNT=INSTALL_COUNT+1
   fi
   SNAPPYDATA_VERSION=$INSTALL_VERSION
   echo ""

   # Spark
   PRODUCT_NAME="Spark"
   PRODUCT_DOWNLOAD_VERSIONS=("${SPARK_DOWNLOAD_VERSIONS[@]}")
   INSTALLED_VERSIONS=$SPARK_VERSIONS
   echo -e "Spark ${CUrl}$SPARK_DOWNLOAD_URL${CNone}"
   doUserInput
   if [ "$INSTALL_VERSION" != "" ]; then
      let INSTALL_COUNT=INSTALL_COUNT+1
   fi
   SPARK_VERSION=$INSTALL_VERSION
   echo ""

   if [ $INSTALL_COUNT -eq 0 ]; then
      echo "You have not selected any products to install."
   else
      echo "You have selected the following versions to install:"
   fi

   if [ "$PADOGRID_VERSION" != "" ]; then
      echo -e "Padogrid: ${CLightGreen}$PADOGRID_VERSION${CNone}"
   fi
   if [ "$GEODE_VERSION" != "" ]; then
      echo -e "Geode: ${CLightGreen}$GEODE_VERSION${CNone}"
   fi
   if [ "$HAZELCAST_ENTERPRISE_VERSION" != "" ]; then
      echo -e "Hazelcast Enterprise: ${CLightGreen}$HAZELCAST_ENTERPRISE_VERSION${CNone}"
   fi
   if [ "$HAZELCAST_OSS_VERSION" != "" ]; then
      echo -e "Hazelcast OSS: ${CLightGreen}$HAZELCAST_OSS_VERSION${CNone}"
   fi
   if [ "$HAZELCAST_MANAGEMENT_CENTER_VERSION" != "" ]; then
      echo -e "Hazelcast Management Center: ${CLightGreen}$HAZELCAST_MANAGEMENT_CENTER_VERSION${CNone}"
   fi
   if [ "$JET_ENTERPRISE_VERSION" != "" ]; then
      echo -e "Jet Enterprise: ${CLightGreen}$JET_ENTERPRISE_VERSION${CNone}"
   fi
   if [ "$JET_OSS_VERSION" != "" ]; then
      echo -e "Jet OSS: ${CLightGreen}$JET_OSS_VERSION${CNone}"
   fi
   if [ "$JET_MANAGEMENT_CENTER_VERSION" != "" ]; then
      echo -e "Jet Management Center: ${CLightGreen}$JET_MANAGEMENT_CENTER_VERSION${CNone}"
   fi
   if [ "$SNAPPYDATA_VERSION" != "" ]; then
      echo -e "SnappyData: ${CLightGreen}$SNAPPYDATA_VERSION${CNone}"
   fi
   if [ "$SPARK_VERSION" != "" ]; then
      echo -e "Spark: ${CLightGreen}$SPARK_VERSION${CNone}"
   fi
   echo ""

   REDO=true
   INNER_LOOP=true
   while [ "$INNER_LOOP" == "true" ]; do
      read -p "Enter 'c' to continue, 'r' to re-enter, 'q' to quit: " INPUT
      case $INPUT in
         [Cc]* ) REDO=false; INNER_LOOP=false;;
         [Rr]* ) REDO=true; INNER_LOOP=false;;
            [Qq]* ) echo "Command Aborted."; INNER_LOOP=false; exit;;
      esac
   done

done
fi

#
# Installs the specified product in the PadoGrid products directory.
# @param productName Product name, i.e., padogrid, geode, hazelcast-oss, hazelcast-enterprise, hazelcast-management-center, 
#                    jet-oss, jet-enterprise, jet-management-center, snappydata, spark
# @param simulate If 'simulate' then outputs the installation commands without actually executing them.
#
# @required PADOGRID_PRODUCTS_PATH
# @required PADOGRID_DOWNLOADS_PATH
#
# @required PADOGRID_DOWNLOAD_URL
# @required PADOGRID_RELEASE
# @required PADOGRID_TARBALL
#
# @required GEODE_VERSION
# @required GEODE_TARBALL
#
# @required HAZELCAST_OSS_RELEASE
# @required HAZELCAST_OSS_TARBALL
#
# @required HAZELCAST_ENTERPRISE_RELEASE
# @required HAZELCAST_ENTERPRISE_TARBALL
#
# @required HAZELCAST_MC_RELEASE
# @required HAZELCAST_MC_TARBALL
#
# @required JET_MC_RELEASE
# @required JET_MC_TARBALL
#
# @required SNAPPYDATA_RELEASE
# @required SNAPPYDATA_TARBALL
#
# @required SPARK_RELEASE
# @required SPARK_TARBALL
#
function installProduct
{
   local __PRODUCT="$1"
   local __SIMULATE="$2"

   if [ "$__PRODUCT" == "padogrid" ]; then 
      if [ "$QUIET" == "true" ] &&  [ -d "$PADOGRID_PRODUCTS_PATH/$PADOGRID_RELEASE" ]; then
         echo "Already installed - $PADOGRID_RELEASE"
      else
      # --------------
      # Download PadoGrid
      echo "+ Downloading $PADOGRID_TAR_BALL to $PADOGRID_DOWNLOADS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$PADOGRID_TARBALL" "https://github.com/padogrid/padogrid/releases/download/$PADOGRID_RELEASE/$PADOGRID_TARBALL"
      else
         curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$PADOGRID_TARBALL" "https://github.com/padogrid/padogrid/releases/download/$PADOGRID_RELEASE/$PADOGRID_TARBALL"
      fi
      
      # Install PadoGrid
      echo "  Installing PadoGrid $PADOGRID_TARBALL in $PADOGRID_PRODUCTS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo tar -C $PADOGRID_PRODUCTS_PATH -xzf "$PADOGRID_DOWNLOADS_PATH/$PADOGRID_TARBALL"
      else
         tar -C $PADOGRID_PRODUCTS_PATH -xzf "$PADOGRID_DOWNLOADS_PATH/$PADOGRID_TARBALL"
         echo "Installed - $PADOGRID_TARBALL"
      fi
      fi
      
   elif [ "$__PRODUCT" == "geode" ]; then 
      
      if [ "$QUIET" == "true" ] &&  [ -d "$PADOGRID_PRODUCTS_PATH/$GEODE_RELEASE" ]; then
         echo "Already installed - $GEODE_RELEASE"
      else
      # --------------
      # Download Geode
      echo "+ Downloading $GEODE_TARBALL to $PADOGRID_DOWNLOADS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$GEODE_TARBALL" "https://archive.apache.org/dist/geode/$GEODE_VERSION/$GEODE_TARBALL"
      else
         curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$GEODE_TARBALL" "https://archive.apache.org/dist/geode/$GEODE_VERSION/$GEODE_TARBALL"
      fi
      
      # Install Geode
      echo "  Installing Apache Geode $GEODE_TARBALL in $PADOGRID_PRODUCTS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo tar -C $PADOGRID_PRODUCTS_PATH -xzf "$PADOGRID_DOWNLOADS_PATH/$GEODE_TARBALL"
      else
         tar -C $PADOGRID_PRODUCTS_PATH -xzf "$PADOGRID_DOWNLOADS_PATH/$GEODE_TARBALL"
         echo "Installed - $GEODE_TARBALL"
      fi
      fi
      
   elif [ "$__PRODUCT" == "hazelcast-oss" ]; then 

      if [ "$QUIET" == "true" ] &&  [ -d "$PADOGRID_PRODUCTS_PATH/$HAZELCAST_OSS_RELEASE" ]; then
         echo "Already installed - $HAZELCAST_OSS_RELEASE"
      else
      # --------------
      # Download Hazelcast OSS
      echo "+ Downloading $HAZELCAST_OSS_TARBALL to $PADOGRID_DOWNLOADS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$HAZELCAST_OSS_TARBALL" "https://download.hazelcast.com/download.jsp?version=$HAZELCAST_OSS_RELEASE&type=tar&p="
      else
         curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$HAZELCAST_OSS_TARBALL" "https://download.hazelcast.com/download.jsp?version=$HAZELCAST_OSS_RELEASE&type=tar&p="
      fi
      
      # Install Hazelcast OSS
      echo "  Installing Hazelcast OSS $HAZELCAST_OSS_TARBALL in $PADOGRID_PRODUCTS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo tar -C $PADOGRID_PRODUCTS_PATH -xzf $PADOGRID_DOWNLOADS_PATH/$HAZELCAST_OSS_TARBALL
      else
         tar -C $PADOGRID_PRODUCTS_PATH -xzf $PADOGRID_DOWNLOADS_PATH/$HAZELCAST_OSS_TARBALL
         echo "Installed - $HAZELCAST_OSS_TARBALL"
      fi
      fi
      
   elif [ "$__PRODUCT" == "hazelcast-enterprise" ]; then 

      if [ "$QUIET" == "true" ] &&  [ -d "$PADOGRID_PRODUCTS_PATH/$HAZELCAST_ENTERPRISE_RELEASE" ]; then
         echo "Already installed - $HAZELCAST_ENTERPRISE_RELEASE"
      else
      # --------------
      # Download Hazelcast Enterprise
      echo "+ Downloading $HAZELCAST_ENTERPRISE_TARBALL to $PADOGRID_DOWNLOADS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo curl -sSL -o "$PADOGRID_DOWNLOADS_PATH/$HAZELCAST_ENTERPRISE_TARBALL" "https://download.hazelcast.com/enterprise/$HAZELCAST_ENTERPRISE_TARBALL"
      else
         curl -sSL -o "$PADOGRID_DOWNLOADS_PATH/$HAZELCAST_ENTERPRISE_TARBALL" "https://download.hazelcast.com/enterprise/$HAZELCAST_ENTERPRISE_TARBALL"
      fi
      
      # Install Hazelcast Enterprise
      echo "  Installing Hazelcast Enterprise $HAZELCAST_ENTERPRISE_TARBALL in $PADOGRID_PRODUCTS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo tar -C $PADOGRID_PRODUCTS_PATH -xzf "$PADOGRID_DOWNLOADS_PATH/$HAZELCAST_ENTERPRISE_TARBALL"
      else
         tar -C $PADOGRID_PRODUCTS_PATH -xzf "$PADOGRID_DOWNLOADS_PATH/$HAZELCAST_ENTERPRISE_TARBALL"
         echo "Installed - $HAZELCAST_ENTERPRISE_TARBALL"
      fi
      fi

   elif [ "$__PRODUCT" == "hazelcast-management-center" ]; then 

      if [ "$QUIET" == "true" ] &&  [ -d "$PADOGRID_PRODUCTS_PATH/$HAZELCAST_MC_RELEASE" ]; then
         echo "Already installed - $HAZELCAST_MC_RELEASE"
      else
      # --------------
      # Download Hazelcast Management Center
      echo "+ Downloading $HAZELCAST_MC_TARBALL to $PADOGRID_DOWNLOADS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$HAZELCAST_MC_TARBALL" "https://download.hazelcast.com/management-center/$HAZELCAST_MC_TARBALL"
      else
         curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$HAZELCAST_MC_TARBALL" "https://download.hazelcast.com/management-center/$HAZELCAST_MC_TARBALL"
      fi
      
      # Install Hazelcast Management Center
      echo "  Installing Hazelcast Management Center $HAZELCAST_MC_TARBALL in $PADOGRID_PRODUCTS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo tar -C $PADOGRID_PRODUCTS_PATH -xzf $PADOGRID_DOWNLOADS_PATH/$HAZELCAST_MC_TARBALL
      else
         tar -C $PADOGRID_PRODUCTS_PATH -xzf $PADOGRID_DOWNLOADS_PATH/$HAZELCAST_MC_TARBALL
         echo "Installed - $HAZELCAST_MC_TARBALL"
      fi
      fi

   elif [ "$__PRODUCT" == "jet-oss" ]; then 
      
      if [ "$QUIET" == "true" ] &&  [ -d "$PADOGRID_PRODUCTS_PATH/$JET_OSS_RELEASE" ]; then
         echo "Already installed - $JET_OSS_RELEASE"
      else
      # --------------
      # Download Jet OSS
      echo "+ Downloading $JET_OSS_TARBALL to $PADOGRID_DOWNLOADS_PATH/..."
      local __JET_OSS_VERSION=${JET_OSS_VERSION%-slim}
      if [ "$__SIMULATE" == "simulate" ]; then
         echo curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$JET_OSS_TARBALL" "https://github.com/hazelcast/hazelcast-jet/releases/download/v$__JET_OSS_VERSION/$JET_OSS_TARBALL"
      else
         curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$JET_OSS_TARBALL" "https://github.com/hazelcast/hazelcast-jet/releases/download/v$__JET_OSS_VERSION/$JET_OSS_TARBALL"
      fi
      
      # Install Jet OSS
      echo "  Installing Hazelcast Jet OSS $JET_OSS_TARBALL in $PADOGRID_PRODUCTS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo tar -C $PADOGRID_PRODUCTS_PATH -xzf "$PADOGRID_DOWNLOADS_PATH/$JET_OSS_TARBALL"
      else
         tar -C $PADOGRID_PRODUCTS_PATH -xzf "$PADOGRID_DOWNLOADS_PATH/$JET_OSS_TARBALL"
         echo "Installed - $JET_OSS_TARBALL"
      fi
      fi
      
   elif [ "$__PRODUCT" == "jet-enterprise" ]; then 

      if [ "$QUIET" == "true" ] &&  [ -d "$PADOGRID_PRODUCTS_PATH/$JET_ENTERPRISE_RELEASE" ]; then
         echo "Already installed - $JET_ENTERPRISE_RELEASE"
      else
      # --------------
      # Download Jet Enterprise
      echo "+ Downloading $JET_ENTERPRISE_TARBALL to $PADOGRID_DOWNLOADS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$JET_ENTERPRISE_TARBALL" "https://download.hazelcast.com/jet-enterprise/$JET_ENTERPRISE_TARBALL"
      else
         curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$JET_ENTERPRISE_TARBALL" "https://download.hazelcast.com/jet-enterprise/$JET_ENTERPRISE_TARBALL"
      fi
      
      # Install Hazelcast Jet Enterprise
      echo "  Installing Hazelcast Jet Enterprises $JET_ENTERPRISE_TARBALL in $PADOGRID_PRODUCTS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo tar -C $PADOGRID_PRODUCTS_PATH -xzf "$PADOGRID_DOWNLOADS_PATH/$JET_ENTERPRISE_TARBALL"
      else
         tar -C $PADOGRID_PRODUCTS_PATH -xzf "$PADOGRID_DOWNLOADS_PATH/$JET_ENTERPRISE_TARBALL"
         echo "Installed - $JET_ENTERPRISE_TARBALL"
      fi
      fi

   elif [ "$__PRODUCT" == "jet-management-center" ]; then 

      if [ "$QUIET" == "true" ] &&  [ -d "$PADOGRID_PRODUCTS_PATH/$HAZELCAST_MC_RELEASE" ]; then
         echo "Already installed - $HAZELCAST_MC_RELEASE"
      else
      # --------------
      # Download Hazelcast Jet Management Center
      echo "+ Downloading $JET_MC_TARBALL to $PADOGRID_DOWNLOADS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         if [[ "$JET_MC_TARBALL" == *"4.20"* ]]; then
            echo curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$JET_MC_TARBALL" "https://download.hazelcast.com/management-center/$JET_MC_TARBALL"
         else
            echo curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$JET_MC_TARBALL" "https://download.hazelcast.com/hazelcast-jet-management-center/$JET_MC_TARBALL"
         fi

      else
         if [[ "$JET_MC_TARBALL" == *"4.20"* ]]; then
            curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$JET_MC_TARBALL" "https://download.hazelcast.com/management-center/$JET_MC_TARBALL"
         else
            curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$JET_MC_TARBALL" "https://download.hazelcast.com/hazelcast-jet-management-center/$JET_MC_TARBALL"
         fi
      fi
      
      # Install Hazelcast Jet Management Center
      echo "  Installing Hazelcast Jet Management Center $JET_MC_TARBALL in $PADOGRID_PRODUCTS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo tar -C $PADOGRID_PRODUCTS_PATH -xzf $PADOGRID_DOWNLOADS_PATH/$JET_MC_TARBALL
      else
         tar -C $PADOGRID_PRODUCTS_PATH -xzf $PADOGRID_DOWNLOADS_PATH/$JET_MC_TARBALL
         echo "Installed - $JET_MC_TARBALL"
      fi
      fi

   elif [ "$__PRODUCT" == "snappydata" ]; then 
      
      if [ "$QUIET" == "true" ] &&  [ -d "$PADOGRID_PRODUCTS_PATH/$SNAPPYDATA_RELEASE" ]; then
         echo "Already installed - $SNAPPYDATA_RELEASE"
      else
      # --------------
      # Download SnappyData
      echo "+ Downloading $SNAPPYDATA_TARBALL to $PADOGRID_DOWNLOADS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$SNAPPYDATA_TARBALL" "https://github.com/TIBCOSoftware/snappydata/releases/download/v$SNAPPYDATA_VERSION/$SNAPPYDATA_TARBALL"
      else
         curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$SNAPPYDATA_TARBALL" "https://github.com/TIBCOSoftware/snappydata/releases/download/v$SNAPPYDATA_VERSION/$SNAPPYDATA_TARBALL"
      fi
      
      # Install SnappyData
      echo "  Installing SnappyData $SNAPPYDATA_TARBALL in $PADOGRID_PRODUCTS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo tar -C $PADOGRID_PRODUCTS_PATH -xzf "$PADOGRID_DOWNLOADS_PATH/$SNAPPYDATA_TARBALL"
      else
         tar -C $PADOGRID_PRODUCTS_PATH -xzf "$PADOGRID_DOWNLOADS_PATH/$SNAPPYDATA_TARBALL"
         echo "Installed - $SNAPPYDATA_TARBALL"
      fi
      fi

   elif [ "$__PRODUCT" == "spark" ]; then 
      
      if [ "$QUIET" == "true" ] &&  [ -d "$PADOGRID_PRODUCTS_PATH/$SPARK_RELEASE" ]; then
         echo "Already installed - $SPARK_RELEASE"
      else
      # --------------
      # Download Spark
      echo "+ Downloading $SPARK_TARBALL to $PADOGRID_DOWNLOADS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$SPARK_TARBALL" "https://archive.apache.org/dist/spark/$SPARK_RELEASE/$SPARK_TARBALL"
      else
         curl -sL -o "$PADOGRID_DOWNLOADS_PATH/$SPARK_TARBALL" "https://archive.apache.org/dist/spark/$SPARK_RELEASE/$SPARK_TARBALL"
      fi
      
      # Install Spark
      echo "  Installing Spark $SPARK_TARBALL in $PADOGRID_PRODUCTS_PATH/..."
      if [ "$__SIMULATE" == "simulate" ]; then
         echo tar -C $PADOGRID_PRODUCTS_PATH -xzf "$PADOGRID_DOWNLOADS_PATH/$SPARK_TARBALL"
      else
         tar -C $PADOGRID_PRODUCTS_PATH -xzf "$PADOGRID_DOWNLOADS_PATH/$SPARK_TARBALL"
         echo "Installed - $SPARK_TARBALL"
      fi
      fi
   fi

}

if [ "$QUIET" == "false" ] && [ $INSTALL_COUNT -eq 0 ]; then
   echo ""
   echo "Product installation canceled. No products selected."
   echo ""
else
   echo ""
   echo "Installing PadoGrid products... Some products may take a long time to download. Please wait."
   echo ""
fi

#
# Install user-entered versions
#

PADOGRID_DOWNLOADS_PATH="$PADOGRID_ENV_BASE_PATH/downloads"
PADOGRID_PRODUCTS_PATH="$PADOGRID_ENV_BASE_PATH/products"
PADOGRID_SNAPSHOTS_PATH="$PADOGRID_ENV_BASE_PATH/snapshots"
PADOGRID_WORKSPACES_PATH="$PADOGRID_ENV_BASE_PATH/workspaces"

# downloads
if [ ! -d "$PADOGRID_DOWNLOADS_PATH" ]; then
   mkdir -p "$PADOGRID_DOWNLOADS_PATH"
fi

# products
if [ ! -d "$PADOGRID_PRODUCTS_PATH" ]; then
   mkdir -p "$PADOGRID_PRODUCTS_PATH"
fi

# snapshots
if [ ! -d "$PADOGRID_SNAPSHOTS_PATH" ]; then
   mkdir -p "$PADOGRID_SNAPSHOTS_PATH"
fi

# workspaces (RWEs)
if [ ! -d "$PADOGRID_WORKSPACES_PATH" ]; then
   mkdir -p "$PADOGRID_WORKSPACES_PATH"
fi

if [ "$PADOGRID_VERSION" != "" ]; then
   PADOGRID_RELEASE="padogrid_$PADOGRID_VERSION"
   PADOGRID_TARBALL="$PADOGRID_RELEASE.tar.gz"
   #installProduct "padogrid" "simulate"
   installProduct "padogrid"
fi
if [ "$GEODE_VERSION" != "" ]; then
   GEODE_RELEASE="apache-geode-$GEODE_VERSION"
   GEODE_TARBALL="$GEODE_RELEASE.tgz"
   # installProduct "geode" "simulate"
   installProduct "geode"
fi
if [ "$HAZELCAST_ENTERPRISE_VERSION" != "" ]; then
   HAZELCAST_ENTERPRISE_RELEASE="hazelcast-enterprise-$HAZELCAST_ENTERPRISE_VERSION"
   HAZELCAST_ENTERPRISE_TARBALL="$HAZELCAST_ENTERPRISE_RELEASE.tar.gz"
   # installProduct "hazelcast-enterprise" "simulate"
   installProduct "hazelcast-enterprise"
fi
if [ "$HAZELCAST_OSS_VERSION" != "" ]; then
   HAZELCAST_OSS_RELEASE="hazelcast-$HAZELCAST_OSS_VERSION"
   HAZELCAST_OSS_TARBALL="$HAZELCAST_OSS_RELEASE.tar.gz"
   # installProduct "hazelcast-oss" "simulate"
   installProduct "hazelcast-oss"
fi
if [ "$HAZELCAST_MANAGEMENT_CENTER_VERSION" != "" ]; then
   HAZELCAST_MC_RELEASE="hazelcast-management-center-$HAZELCAST_MANAGEMENT_CENTER_VERSION"
   HAZELCAST_MC_TARBALL="$HAZELCAST_MC_RELEASE.tar.gz"
   # installProduct "hazelcast-management-center" "simulate"
   installProduct "hazelcast-management-center"
fi
if [ "$JET_ENTERPRISE_VERSION" != "" ]; then
   JET_ENTERPRISE_RELEASE="hazelcast-jet-enterprise-$JET_ENTERPRISE_VERSION"
   JET_ENTERPRISE_TARBALL="$JET_ENTERPRISE_RELEASE.tar.gz"
   # installProduct "jet-enterprise" "simulate"
   installProduct "jet-enterprise"
fi
if [ "$JET_OSS_VERSION" != "" ]; then
   JET_OSS_RELEASE="hazelcast-jet-$JET_OSS_VERSION"
   JET_OSS_TARBALL="$JET_OSS_RELEASE.tar.gz"
   # installProduct "jet-oss" "simulate"
   installProduct "jet-oss"
fi
if [ "$JET_MANAGEMENT_CENTER_VERSION" != "" ]; then
   if [[ "$JET_MANAGEMENT_CENTER_VERSION" == *"4.20"* ]]; then
      JET_MC_RELEASE="hazelcast-management-center-$JET_MANAGEMENT_CENTER_VERSION"
   else
      JET_MC_RELEASE="hazelcast-jet-management-center-$JET_MANAGEMENT_CENTER_VERSION"
   fi
   JET_MC_TARBALL="$JET_MC_RELEASE.tar.gz"
   # installProduct "jet-management-center" "simulate"
   installProduct "jet-management-center"
fi
if [ "$SNAPPYDATA_VERSION" != "" ]; then
   SNAPPYDATA_RELEASE="snappydata-$SNAPPYDATA_VERSION"
   SNAPPYDATA_TARBALL="$SNAPPYDATA_RELEASE.tar.gz"
   # installProduct "snappydata" "simulate"
   installProduct "snappydata"
fi
if [ "$SPARK_VERSION" != "" ]; then
   SPARK_RELEASE="spark-$SPARK_VERSION"
   SPARK_TARBALL="$SPARK_RELEASE.tgz"
   # installProduct "spark" "simulate"
   installProduct "spark"
fi
echo ""

echo "PadoGrid Installation complete."
echo ""

# Check if an RWE exists in the workspaces dir
pushd $PADOGRID_WORKSPACES_PATH > /dev/null 2>&1
RWE_EXISTS="false"
for i in *; do
   if [ -d "$i" ]; then
      if [ -f "$i/initenv.sh" ]; then 
         RWE_EXISTS="true"
         break;
      fi
   fi
done
popd > /dev/null 2>&1

# If RWEs do not exist then create one
if [ "$RWE_EXISTS" == "false" ]; then
   __PADOGRID_HOME=""
   GEODE_HOME=""
   HAZELCAST_HOME=""
   JET_HOME=""
   HAZELCAST_MC_HOME=""
   JET_MC_HOME=""
   JET_HOME=""
   HAZELCAST_HOME=""
   SNAPPYDATA_HOME=""
   SPARK_HOME=""
   GEMFIRE_HOME=""
   COHERENCE_HOME=""

   # Set default workspaces home
   PADOGRID_WORKSPACES_HOME="$PADOGRID_ENV_BASE_PATH/workspaces/myrwe"

   # Find all installed products
   HAZELCAST_OSS_HOME=""
   JET_OSS_HOME=""
   pushd $PADOGRID_PRODUCTS_PATH > /dev/null 2>&1
   for i in *; do
     if [[ "$i" == **"padogrid"** ]]; then
       __PADOGRID_HOME="$PADOGRID_PRODUCTS_PATH/$i"
     elif [[ "$i" == **"geode"** ]]; then
       GEODE_HOME="$PADOGRID_PRODUCTS_PATH/$i"
     elif [[ "$i" == **"hazelcast-enterprise"** ]]; then
       HAZELCAST_HOME="$PADOGRID_PRODUCTS_PATH/$i"
     elif [[ "$i" == **"hazelcast-jet-enterprise"** ]]; then
       JET_HOME="$PADOGRID_PRODUCTS_PATH/$i"
     elif [[ "$i" == **"hazelcast-management-center"** ]]; then
       HAZELCAST_MC_HOME="$PADOGRID_PRODUCTS_PATH/$i"
     elif [[ "$i" == **"hazelcast-jet-management-center"** ]]; then
       JET_MC_HOME="$PADOGRID_PRODUCTS_PATH/$i"
     elif [[ "$i" == **"hazelcast-jet"** ]]; then
       JET_HOME="$PADOGRID_PRODUCTS_PATH/$i"
       JET_OSS_HOME="$JET_HOME"
     elif [[ "$i" == **"hazelcast"** ]]; then
       HAZELCAST_HOME="$PADOGRID_PRODUCTS_PATH/$i"
       HAZELCAST_OSS_HOME="$HAZELCAST_HOME"
     elif [[ "$i" == **"snappydata"** ]]; then
       SNAPPYDATA_HOME="$PADOGRID_PRODUCTS_PATH/$i"
     elif [[ "$i" == **"spark"** ]]; then
       SPARK_HOME="$PADOGRID_PRODUCTS_PATH/$i"
     elif [[ "$i" == **"gemfire"** ]]; then
       GEMFIRE_HOME="$PADOGRID_PRODUCTS_PATH/$i"
#     elif [[ "$i" == **"coherence"** ]]; then
#        COHERENCE_HOME="$PADOGRID_PRODUCTS_PATH/$i"
     fi
   done
   popd > /dev/null 2>&1

   if [ -f "$__PADOGRID_HOME/bin_sh/create_rwe" ]; then
      echo "PadoGrid: $__PADOGRID_HOME"
      echo ""
      echo "Creating your first rwe in the specified PadoGrid environment..."
      echo ""

      TMP_ENV_FILE=/tmp/$EXECUTABLE-$(date "+%m%d%y%H%M%S").sh
      # product homes
      if [ "$HAZELCAST_OSS_HOME" != "" ]; then
         HAZELCAST_HOME="$HAZELCAST_OSS_HOME"
      fi
      if [ "$JET_OSS_HOME" != "" ]; then
         JET_HOME="$JET_OSS_HOME"
      fi
      if [ "$HAZELCAST_HOME" != "" ]; then
        PRODUCT_HOME="$HAZELCAST_HOME"
      elif [ "$GEODE_HOME" != "" ]; then
        PRODUCT_HOME="$GEODE_HOME"
         elif [ "$JET_HOME" != "" ]; then
        PRODUCT_HOME="$JET_HOME"
      elif [ "$SNAPPYDATA_HOME" != "" ]; then
        PRODUCT_HOME="$SNAPPYDATA_HOME"
      elif [ "$SPARK_HOME" != "" ]; then
        PRODUCT_HOME="$SNAPPYDATA_HOME"
      elif [ "$GEMFIRE_HOME" != "" ]; then
        PRODUCT_HOME="$GEMFIRE_HOME"
      fi

      echo "PADOGRID_ENV_BASE_PATH=\"$PADOGRID_ENV_BASE_PATH\"" >> $TMP_ENV_FILE
      echo "PADOGRID_WORKSPACES_HOME=\"$PADOGRID_WORKSPACES_HOME\"" >> $TMP_ENV_FILE
      echo "GEODE_HOME=\"$GEODE_HOME\"" >> $TMP_ENV_FILE
      echo "HAZELCAST_HOME=\"$HAZELCAST_HOME\"" >> $TMP_ENV_FILE
      echo "HAZELCAST_MC_HOME=\"$HAZELCAST_MC_HOME\"" >> $TMP_ENV_FILE
      echo "JET_HOME=\"$JET_HOME\"" >> $TMP_ENV_FILE
      echo "JET_MC_HOME=\"$JET_MC_HOME\"" >> $TMP_ENV_FILE
      echo "SNAPPYDATA_HOME=\"$SNAPPYDATA_HOME\"" >> $TMP_ENV_FILE
      echo "SPARK_HOME=\"$SPARK_HOME\"" >> $TMP_ENV_FILE
      echo "GEMFIRE_HOME=\"$GEMFIRE_HOME\"" >> $TMP_ENV_FILE
      echo "COHERENCE_HOME=\"$COHERENCE_HOME\"" >> $TMP_ENV_FILE
      if [ "$QUIET" == "false" ]; then
         if [ "$PRODUCT_HOME" != "" ]; then
            $__PADOGRID_HOME/bin_sh/create_rwe -rwe myrwe -product "$PRODUCT_HOME" -env $TMP_ENV_FILE 
         fi
      else
         if [ "$PRODUCT_HOME" != "" ]; then
            $__PADOGRID_HOME/bin_sh/create_rwe -quiet -rwe myrwe -product "$PRODUCT_HOME" -env $TMP_ENV_FILE
         fi
      fi
      rm $TMP_ENV_FILE
   fi
fi

#!/usr/bin/env bash 

# ========================================================================
# Copyright (c) 2020 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-user -githost -branch -connect -preview -download -workspace -quiet -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Install the specified bundle file in the current padogrid workspace

WARNING
   This command OVERWRITES the files in the current padogrid workspace that have
   the same paths. As a safety measure, it will back up the workspace by executing
   the 'create_bundle -all' command before  installing the specified bundle.


SYNOPSIS
   $EXECUTABLE [-user git_user_name]
               [-githost github|gitea]
               [-branch git_branch] 
               [-connect https|ssh]
               [-workspace default | workspace_name]
               [-preview] [-download]
               [-quiet] [-?] bundle_file_path

DESCRIPTION
   Installs the specified bundle file in the current padogrid workspace. Make
   sure to terminate all of the conflicting clusters and apps before executing
   this command. Otherwise, the running processes may produce unpredictable behavior.

OPTIONS
   -user git_user_name
             Git user name. If specified, then it downloads the specified bundle from user's
             Git repos.

   -githost github|gitea
             Git host. Supported git hosts are 'github' and 'gitea'. Default: github.

   -branch git_branch
            Git branch to download. If not specified then the default branch is downloaded.


   -connect https|ssh
             Git connection type. For GitHub, the default is 'https'. For Gitea, only 'ssh'
             is supported and this option is ignored. Specify 'ssh' if the bundle repos are 
             private. To connect to private repos, you must first deploy your public key, i.e.,
             ~/.ssh/id_rsa.pub to your repo account.

   -preview
             Do not install but display the bundle contents.

   -download
             Downloads and installs the specified bundle from the remote padogrid
             bundle repo. To prevent it from installing, specify the '-preview' option.
             If the '-preview' option is specified, then it downloads and displays the
             contents but does not install the bundle. You can install the downloaded
             bundle later by specifying the bundle file path.

   -workspace default | workspace_name
             If this option is specified then it installs the bundle in the specified workspace.
             if the workspace name is 'default' then the bundle name is used as the workspace name. 
             The new workspace it creates clones the same configuration as the current workspace. 
             If the '-download' option is also specified, then it checks out the bundle from the repo.

   -quiet
             Quiet mode. Supresses the interactive prompt.

   bundle_file_path
              Bundle file path if local or bundle name if download.

DEFAULT
   $EXECUTABLE -user padogrid -githost github

EXAMPLES
   To list remote bundles:
      $EXECUTABLE

   To preview a remote bundle:
      $EXECUTABLE -download -preview bundle-coherence-14-app-perf_test_wan-cluster-ln-ny

   To install a remote bundle:
      $EXECUTABLE -download bundle-coherence-14-app-perf_test_wan-cluster-ln-ny

   To check out a remote bundle as a workspace:
      $EXECUTABLE -download -workspace bundle-coherence-14-app-perf_test_wan-cluster-ln-ny

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
FILES
   $PADOGRID_WORKSPACE/bundles
             The current workspace bundles directory where locally generated bundles are stored.
EOF
fi
cat <<EOF

SEE ALSO
EOF
   printSeeAlsoList "*bundle*" $EXECUTABLE
   exit
fi

if [ "$1" == "" ]; then
   LIST="true"
fi
if [ "$LIST" == "true" ]; then
   show_bundle -list
   exit
fi

BUNDLE_FILE_PATH=${@: -1}

if [ "$USER" == "" ]; then
   GITHUB_USER="padogrid"
else
   GITHUB_USER="$USER"
fi
if [ "$DOWNLOAD" == "true" ]; then
   IS_DOWNLOAD="true"
   if [ "$WORKSPACE_SPECIFIED" == "true" ]; then
      if [ "$WORKSPACE_ARG" != "default" ]; then
         REPO_NAME="$WORKSPACE_ARG"
      else
         REPO_NAME="$BUNDLE_FILE_PATH"
      fi
      GIT_DIR="$PADOGRID_WORKSPACES_HOME/$REPO_NAME"
      if [ "$QUIET" == "false" ] && [ -d "$GIT_DIR" ]; then
         echo >&2 "ERROR: The specified bundle workspace already exists. Command aborted."
         exit 1
      fi
   else
      GIT_DIR=$PADOGRID_WORKSPACE/bundles/$BUNDLE_FILE_PATH
      TARBALL=${BUNDLE_FILE_PATH}.tar.gz
      TARBALL_PATH=$PADOGRID_WORKSPACE/bundles/$TARBALL
      if [ "$QUIET" == "false" ] && [ -f "$TARBALL_PATH" ]; then
         echo "The specified bundle exists in the bundles directory."
         echo "   $PADOGRID_WORKSPACE/bundles/$TARBALL"
         REDO=true
         INNER_LOOP=true
         while [ "$INNER_LOOP" == "true" ]; do
            read -p "Enter 'e' to install the existing bundle, 'd' to download, 'q' to quit: " INPUT
            case $INPUT in
               [Ee]* ) IS_DOWNLOAD="false"; INNER_LOOP=false;;
               [Dd]* ) IS_DOWNLOAD="true"; INNER_LOOP=false;;
               [Qq]* ) echo "Command Aborted."; INNER_LOOP=false; exit;;
               * ) INNER_LOOP=true;;
            esac
         done
      fi
   fi
   if [ "$IS_DOWNLOAD" == "true" ]; then
      if [ "$WORKSPACE_SPECIFIED" == "false" ]; then
         if [ -d $GIT_DIR ]; then
            rm -rf $GIT_DIR
         fi
      fi

      # Source in .padogrid/setenv.sh
      SETENV_FILE="$HOME/.padogrid/setenv.sh"
      if [ -f "$SETENV_FILE" ]; then
         . $SETENV_FILE
      fi

      if [ "$GITHOST" == "gitea" ]; then
         GITHUB_USER_HOME="$GITEA_SSH_URL:$GITHUB_USER"
      else
         if [ "$CONNECT" == "ssh" ] || [ "$GITHUB_PRIVATE_REPO_ENABLED" == "true" ]; then
             GITHUB_USER_HOME="git@github.com:$GITHUB_USER"
         else
             GITHUB_USER_HOME="https://github.com/$GITHUB_USER"
         fi
      fi
      
      if [ "$WORKSPACE_SPECIFIED" == "true" ]; then
         pushd $PADOGRID_WORKSPACES_HOME > /dev/null 2>&1 
         echo git clone $GITHUB_USER_HOME/${BUNDLE_FILE_PATH}.git $REPO_NAME
         git clone $GITHUB_USER_HOME/${BUNDLE_FILE_PATH}.git $REPO_NAME> /dev/null 2>&1
         popd > /dev/null 2>&1 
      else
         pushd $PADOGRID_WORKSPACE/bundles > /dev/null 2>&1 
         echo git clone $GITHUB_USER_HOME/${BUNDLE_FILE_PATH}.git 
         git clone $GITHUB_USER_HOME/${BUNDLE_FILE_PATH}.git > /dev/null 2>&1
         popd > /dev/null 2>&1 
      fi

      if [ ! -d "$GIT_DIR" ]; then
         echo >&2 "ERROR: The specified bundle does not exist for the user [$GITHUB_USER]."
         exit 1
      fi
      pushd $GIT_DIR > /dev/null 2>&1 
      if [ "$BRANCH" != "" ]; then
         BRANCH_IN_REMOTE=$(git ls-remote --heads origin ${BRANCH})
	 if [[ -z ${BRANCH_IN_REMOTE} ]]; then
            echo >&2 "ERROR: The specified branch does not exist: [$BRANCH]. Command aborted."
	    exit 1
	 fi
         git checkout $BRANCH
      fi
      git pull
      if [ "$WORKSPACE_SPECIFIED" == "false" ]; then
         mvn package
      fi
      popd > /dev/null 2>&1 
      if [ "$WORKSPACE_SPECIFIED" == "true" ]; then
         # Copy the workspace files
         create_workspace -name ws-${BUNDLE_FILE_PATH} -product $PRODUCT_HOME -quiet > /dev/null
         rm -rf $PADOGRID_WORKSPACES_HOME/ws-${BUNDLE_FILE_PATH}/clusters/*
         cp -r $PADOGRID_WORKSPACES_HOME/ws-${BUNDLE_FILE_PATH}/* $GIT_DIR/
         cp $PADOGRID_WORKSPACES_HOME/ws-${BUNDLE_FILE_PATH}/.addonenv.sh $GIT_DIR/
         rm -rf $PADOGRID_WORKSPACES_HOME/ws-${BUNDLE_FILE_PATH}
         echo ""
         echo "Bundle workspace created. Switch workspace by executing the following command:"
         echo -e "   ${CLightGreen}switch_workspace $REPO_NAME ${CNone}"
         echo ""
         exit
      else
         mv $GIT_DIR/target/assembly/$TARBALL $PADOGRID_WORKSPACE/bundles
         rm -rf $GIT_DIR
         if [ -f $TARBALL_PATH ]; then
            BUNDLE_FILE_PATH=$TARBALL_PATH
         else
            echo >&2 "ERROR: File not found. Command aborted."
            exit 1
         fi
      fi
   else
      BUNDLE_FILE_PATH=$TARBALL_PATH
   fi
fi

if [ ! -f $BUNDLE_FILE_PATH ]; then
   echo >&2 "----------------------------------------------------------------"
   echo >&2 "WORKSPACE: $PADOGRID_WORKSPACE"
   echo >&2 "    ERROR: The specified file not found. Command aborted."
   echo >&2 "----------------------------------------------------------------"
   exit 1 
fi

file_name="`basename $BUNDLE_FILE_PATH $0`"
if [ "$PRODUCT" == "hazelcast" ]; then
   if [[ "$file_name" == "bundle-hazelcast-"* ]]; then
      cluster_type="imdg"
   elif [[ "$file_name" == "bundle-jet-"* ]]; then
      cluster_type="jet"
   else
      echo >&2 "ERROR: Unsupported bundle name. Command aborted."
      exit 1
   fi
elif [[ "$file_name" == "bundle-geode-"* ]]; then
   cluster_type="geode"
elif [[ "$file_name" == "bundle-coherence-"* ]]; then
   cluster_type="coherence"
elif [[ "$file_name" == "bundle-gemfire-"* ]]; then
   cluster_type="gemfire"
elif [[ "$file_name" == "bundle-snappydata-"* ]]; then
   cluster_type="snappydata"
else
   echo >&2 "ERROR: Unsupported bundle name. Command aborted."
   exit 1
fi

if [ "$PREVIEW" == "false" ] && [ "$PRODUCT" == "hazelcast" ] && [ "$CLUSTER_TYPE" != "$cluster_type" ]; then
   echo >&2 "ERROR: Invalid cluster type. This workspace is configured to run \"$CLUSTER_TYPE\""
   echo >&2 "       but the bundle is for \"$cluster_type\". Command aborted."
   exit 1
fi

# Set workspace and its path
if [ "$WORKSPACE_SPECIFIED" == "true" ] && [ "$WORKSPACE_ARG" != "default" ]; then
   WORKSPACE=$WORKSPACE_ARG
   WORKSPACE_PATH="$PADOGRID_WORKSPACES_HOME/$WORKSPACE_ARG"
else
   WORKSPACE=$(basename "$PADOGRID_WORKSPACE")
   WORKSPACE_PATH="$PADOGRID_WORKSPACE"
fi

# Display warning message and backup if the workspace exists
if [ -d "$WORKSPACE_PATH" ] && [ "$PREVIEW" == "false" ]; then
   if [ "$QUIET" == "false" ]; then
      echo ""
      echo "        WORKSPACE: $WORKSPACE_PATH"
      echo "Bundle to Install: $BUNDLE_FILE_PATH"
      echo ""
      echo -e "${CBrownOrange}WARNING:${CNone}"
      echo "   This command installs the specified bundle in the existing workspace. Any"
      echo "   conflicting files will be overwritten with the files in the bundle. Note that"
      echo "   as a safety measure, it will automatically back up the padogrid workspace"
      echo "   in the 'bundles' directory before installing the specified bundle."
      echo "Do you want to continue?"
      echo "(Enter 'continue' + Enter to continue the cluster removal, other keys to abort.)"
      read INPUT
      if [ "$INPUT" != "continue" ]; then
         echo "Bundle installation aborted."
         exit
      fi
   fi

   # Backup the entire workspace
   BUNDLE_DISPLAY_MESSAGE="Backup Bundle Created:"
   echo ""
   echo "BACKUP"
   echo "------"
   $SCRIPT_DIR/create_bundle -workspace $WORKSPACE -all -quiet
fi

# 
# Find all pods, clusters and apps in the bundle
#
# Find all clusters
PODS=""
for i in `tar tzvf $BUNDLE_FILE_PATH | sed  -e 's/^.* clusters\/.*//' -e 's/^.* apps\/.*//' -e 's/^.* k8s\/.*//' -e 's/^.* docker\/.*//' -e 's/^.* pods\//pods\//'`; do
   if [[ $i == pods/* ]]; then
      str=${i#pods/}
      pod=$(echo $str | sed 's/\/.*$//')
      if [ "$pod" != "" ] && [[ "$PODS" != *"$pod"* ]]; then
         PODS="$PODS $pod"
      fi
   fi
done

CLUSTERS=""
for i in `tar tzvf $BUNDLE_FILE_PATH | sed  -e 's/^.* pods\/.*//' -e 's/^.* apps\/.*//' -e 's/^.* k8s\/.*//' -e 's/^.* docker\/.*//' -e 's/^.* clusters\//clusters\//'`; do
   if [[ $i == clusters/* ]]; then
      str=${i#clusters/}
      cluster=$(echo $str | sed 's/\/.*$//')
      if [ "$cluster" != "" ] && [[ "$CLUSTERS" != *"$cluster"* ]]; then
         CLUSTERS="$CLUSTERS $cluster"
      fi
   fi
done

# Find all apps
APPS=""
for i in `tar tzvf $BUNDLE_FILE_PATH | sed  -e 's/^.* pods\/.*//' -e 's/^.* clusters\/.*//' -e 's/^.* k8s\/.*//' -e 's/^.* docker\/.*//' -e 's/^.* apps\//apps\//'`; do
   if [[ $i == apps/* ]]; then
      str=${i#apps/}
      app=$(echo $str | sed 's/\/.*$//')
      if [ "$app" != "" ] && [[ "$APPS" != *"$app"* ]]; then
         APPS="$APPS $app"
      fi
   fi
done

# Find all kubernetes
K8S="" 
for i in `tar tzvf $BUNDLE_FILE_PATH | sed  -e 's/^.* pods\/.*//' -e 's/^.* clusters\/.*//' -e 's/^.* apps\/.*//' -e 's/^.* docker\/.*//' -e 's/^.* k8s\//k8s\//'`; do
   if [[ $i == k8s/* ]]; then
      str=${i#k8s/}
      k8s=$(echo $str | sed 's/\/.*$//')
      if [ "$k8s" != "" ] && [[ "$K8S" != *"$k8s"* ]]; then
         K8S="$K8S $k8s"
      fi
   fi
done

# Find all dockers
DOCKERS="" 
for i in `tar tzvf $BUNDLE_FILE_PATH | sed  -e 's/^.* pods\/.*//' -e 's/^.* clusters\/.*//' -e 's/^.* apps\/.*//' -e 's/^.* k8s\/.*//' -e 's/^.* docker\//docker\//'`; do
   if [[ $i == docker/* ]]; then
      str=${i#docker/}
      docker=$(echo $str | sed 's/\/.*$//')
      if [ "$docker" != "" ] && [[ "$DOCKERS" != *"$docker"* ]]; then
         DOCKERS="$DOCKERS $docker"
      fi
   fi
done

# Create workspace if it does not exist
if [ ! -d "$WORKSPACE_PATH" ]; then
   create_workspace -name $WORKSPACE_ARG -product $PRODUCT_HOME -quiet > /dev/null
   WORKSPACE_CREATED="true"
else
   WORKSPACE_CREATED="false"
fi

#
# Install the specified bundle
# 
if [ "$PREVIEW" == "true" ]; then
   tar -tzvf $BUNDLE_FILE_PATH
else
   tar -C $WORKSPACE_PATH -xzvf $BUNDLE_FILE_PATH
fi

echo ""
if [ "$PREVIEW" == "true" ]; then
   echo "PREVIEW"
   echo "-------"
else
   echo "INSTALLED"
   echo "---------"
fi
if [ "$PREVIEW" == "true" ]; then
   echo "      Cluster Type: $cluster_type"
   if [ "$DOWNLOAD" == "true" ]; then
   echo " Downloaded Bundle: $BUNDLE_FILE_PATH"
   else
   echo "            Bundle: $BUNDLE_FILE_PATH"
   fi
   echo "   Preiview Pod(s):$PODS"
   echo "Preview Cluster(s):$CLUSTERS"
   echo "   Preview Apps(s):$APPS"
   echo "    Preview Docker:$DOCKERS"
   echo "      Preiview K8S:$K8S"
else
   echo "           WORKSPACE: $WORKSPACE_PATH"
   echo "        Cluster Type: $cluster_type"
   echo "              Bundle: $BUNDLE_FILE_PATH"
   echo "    Installed Pod(s):$PODS"
   echo "Installed Cluster(s):$CLUSTERS"
   echo "    Installed App(s):$APPS"
   echo "    Installed Docker:$DOCKERS"
   echo "       Installed K8S:$K8S"
   echo ""
   echo "The specified bundle extracted and installed."
fi

if [ "$WORKSPACE_CREATED" == "true" ]; then
   echo ""
   echo "Bundle workspace created. Switch workspace by executing the following command:"
   echo -e "   ${CLightGreen}switch_workspace $WORKSPACE_ARG ${CNone}"
fi
echo ""

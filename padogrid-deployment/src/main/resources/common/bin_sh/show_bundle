#!/usr/bin/env bash 

# ========================================================================
# Copyright (c) 2020 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-user -product -console -all -list -header -catalog -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - List online bundles or display bundle descriptions

SYNOPSIS
   $EXECUTABLE [-user GitHub_user_name] [-all | [-product bundle_product_name] | [-list|-header|-catalog] ] [-console] [bundle_file_name]

DESCRIPTION
   Lists online bundles or displays the specified bundle's README.md file in the browser. If
   browser is not supported then it displays the README.md file on the console instead. By
   default, it searches the repos maintained by the GitHub user, 'padogrid'.

   The user name can be changed by specifying the '-user' option. To include a list of user names,
   set the 'GITHUB_USERS' environment variable in the '~/.padogrid/seten.sh' file.

OPTIONS
   -user
             GitHub user name. If specified, then the specified user's GitHub repos are searched
             for bundles. 
            
   -all
             Includes all product bundles available in the remote bundle repo.
   
   -product bundle_product_name
             Search the specified bundle product. Supported bundle product names are: 
                $BUNDLE_PRODUCT_LIST

   -list
             Lists product bundles available in the remote bundle repo. If '-all'
             is specified then it lists bundles available for all products, other wise, it lists
             bundles for only the the current workspace product.

   -header
             Lists product bundles along with header information describing each bundle in the
             remote bundle repo. If '-all' is specified then it lists bundles available
             for all products, other wise, it lists bundles for only the the current workspace product.

   -console
             Displays README.md on the console. By default, if this option is not specified,
             then it displays the README.md file in the browser. If the browser cannot be
             launched then it displays the README.md file on the console instead.

   -catalog
             Displays the bundle catalog in the browser. If the browser cannot be launched
             then it lists header information, i.e., the '-header' option is executed.


   bundle_file_name
             Bundle name or bundle file path

DEFAULT
   $EXECUTABLE -user padogrid -list

EXAMPLES
   To list remote bundles for the current workspace product:
      $EXECUTABLE -list

   To list all remote bundles:
      $EXECUTABLE -list

   To list headers of remote bundles:
      $EXECUTABLE -header

   To view the bundle (or use case) catalog in the browser:
      $EXECUTABLE -catalog

   To view a remote bundle help (READEME.md) in the browser:
      $EXECUTABLE bundle-jet-3-cluster-trade

   To view a remote bundle help (READEME.md) on the console:
      $EXECUTABLE -console bundle-jet-3-cluster-trade
EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF

FILES
   $PADOGRID_WORKSPACE/bundles
             The current workspace bundles directory where locally generated bundles are stored.
EOF
fi
cat <<EOF

SEE ALSO
EOF
   printSeeAlsoList "*bundle*" $EXECUTABLE
   exit
fi

if [ "$1" == "" ]; then
   LIST="true"
fi
GITHUB_USER="padogrid"
if [ "$USER" != "" ]; then
   GITHUB_USER="$USER"
   GITHUB_USERS="$GITHUB_USER"
else
   SETENV_FILE="$HOME/.padogrid/setenv.sh"
   if [ -f "$SETENV_FILE" ]; then
      . $SETENV_FILE
   fi
   GITHUB_USERS="padogrid $GITHUB_USERS"
fi
if [ "$ALL" == "true" ]; then
   BUNDLE_PRODUCTS="$BUNDLE_PRODUCT_LIST"
   BUNDLE_PRODUCT="$PRODUCT"
elif [ "$PRODUCT_ARG" != "" ]; then
   BUNDLE_PRODUCTS="$PRODUCT_ARG"
   BUNDLE_PRODUCT="$PRODUCT_ARG"
else
   BUNDLE_PRODUCTS="$PRODUCT"
   BUNDLE_PRODUCT="$PRODUCT"
fi

if [ "$CATALOG" == "true" ]; then
   LIST="false"
   HEADER="false"
   GITHUB_USER_HOME="https://github.com/$GITHUB_USER"
   BUNDLE_REPOS="$$GITHUB_USER_HOME?tab=repositories"
   CATALOG_URL="$GITHUB_USER_HOME/catalog-bundles/blob/master/$BUNDLE_PRODUCT-catalog.md"
   BROWSER_URL="${CATALOG_URL}"
   if [[ ${OS_NAME} == DARWIN* ]]; then
      open "$BROWSER_URL"
   elif [[ ${OS_NAME} == CYGWIN* ]] || [ "$(which cmd.exe)" != "" ]; then
      cmd.exe /c start "" "$BROWSER_URL" > /dev/null 2>&1
   else
      HEADER="true"
      echo "(Catalog: $BROWSER_URL)"
   fi
   if [ "$HEADER" == "false" ]; then
      exit
   fi
fi


if [ "$ALL" == "true" ]; then
    LIST="true"
fi
if [ "$USER" != "" ]; then
   LIST="true"
fi

BUNDLE_FILE_PATH=${@: -1}
ARG1=${@: -2}

if [ "$1" == "" ] || [[ "$BUNDLE_FILE_PATH" == "-"* ]] || [[ "$ARG1" == "-product "* ]] || [[ "$ARG1" == "-user "* ]]; then
   # If bundle file not specified... 
   echo ""
   echo "Remote Bundle List"
   echo "------------------"
   echo ""
   for GITHUB_USER in $GITHUB_USERS; do
      GITHUB_USER_HOME="https://github.com/$GITHUB_USER"
      BUNDLE_REPOS="$GITHUB_USER_HOME?tab=repositories"
      RAW_BASE_URL="https://raw.githubusercontent.com/$GITHUB_USER"

      echo -e "(Repo: ${CLightGreen}$GITHUB_USER_HOME)${CNone}"
      let BUNDLE_INDEX=0
      for BUNDLE_PRODUCT in $BUNDLE_PRODUCTS; do
         HREF=$(curl -sS $BUNDLE_REPOS | grep "\/$GITHUB_USER/bundle-${BUNDLE_PRODUCT}\-")
         BUNDLE_LIST=""
         for i in $HREF; do
            if [[ $i == *href=* ]]; then
               BUNDLE_NAME=$(echo $i | sed -e "s/.*href=\"//" -e  "s/\"//g" -e "s/\/$GITHUB_USER\///")
               BUNDLE_LIST="$BUNDLE_LIST $BUNDLE_NAME"
            fi
         done
         for BUNDLE_NAME in $BUNDLE_LIST; do
            let BUNDLE_INDEX=BUNDLE_INDEX+1
            echo -e "[$BUNDLE_INDEX] ${CBrownOrange}${BUNDLE_NAME}${CNone}"
            if [ "$HEADER" == "true" ]; then
               RAW_FILE_URL="$RAW_BASE_URL/${BUNDLE_NAME}/master/README_HEADER.md"
               echo "    $(curl -sS $RAW_FILE_URL)"
               echo ""
            fi
         done
      done
      echo "---------------------------------------------------------------------------"
      echo ""
   done

   if [ "$HEADER" == "false" ]; then
      echo "Bundle Commands"
      echo "---------------"
      echo "View header descriptions: show_bundle -header"
   else
      echo "Bundle Commands"
      echo "---------------"
   fi

   echo "View catalog (use cases): show_bundle -catalog"
   echo "View bundle instructions: show_bundle bundle_file_name"
   echo " Preview bundle contents: install_bundle -download -preview bundle_file_name"
   echo "          Install bundle: install_bundle -download bundle_file_name"
   echo ""
else
   # If bundle file specified... 

   # Get bundle type
   if [[ "$BUNDLE_FILE_PATH" == "bundle-geode-"* ]]; then
      __PRODUCT="geode"
      BUNDLE_PRODUCT="geode"
   elif [[ "$BUNDLE_FILE_PATH" == "bundle-gemfire-"* ]]; then
      __PRODUCT="geode"
      BUNDLE_PRODUCT="gemfire"
   elif [[ "$BUNDLE_FILE_PATH" == "bundle-hazelcast-"* ]]; then
      __PRODUCT="hazelcast"
      BUNDLE_PRODUCT="hazelcast"
   elif [[ "$BUNDLE_FILE_PATH" == "bundle-jet-"* ]]; then
      __PRODUCT="hazelcast"
      BUNDLE_PRODUCT="jet"
   elif [[ "$BUNDLE_FILE_PATH" == "bundle-snappydata-"* ]]; then
      __PRODUCT="snappydata"
      BUNDLE_PRODUCT="snappydata"
   else
      echo >&2 "ERROR: Invalid bundle name. Command aborted."
      exit 1
   fi
   
   
   GITHUB_USER_HOME="https://github.com/$GITHUB_USER"
   BUNDLE_REPOS="https://github.com/$GITHUB_USER?tab=repositories"
   RAW_BASE_URL="https://raw.githubusercontent.com/$GITHUB_USER"
   HREF=$(curl -sS $BUNDLE_REPOS | grep "\/$GITHUB_USER/bundle-${BUNDLE_PRODUCT}\-")
   BUNDLE_LIST=""
   for i in $HREF; do
      if [[ $i == *href=* ]]; then
         BUNDLE_NAME=$(echo $i | sed -e "s/.*href=\"//" -e  "s/\"//g" -e "s/\/$GITHUB_USER\///")
         BUNDLE_LIST="$BUNDLE_LIST $BUNDLE_NAME"
      fi
   done
   
   for BUNDLE_NAME in $BUNDLE_LIST; do
      if [ "$BUNDLE_NAME" == "$BUNDLE_FILE_PATH" ]; then
         BUNDLE_FOUND="true"
      fi
   done
   if [ "$BUNDLE_FOUND" != "true" ]; then
      echo >&2 "ERROR: Specified bundle does not exist in the repo. Command aborted."
      exit 1
   fi
   
   BUNDLE_NAME=$BUNDLE_FILE_PATH
   BROWSER_URL="${GITHUB_USER_HOME}/${BUNDLE_NAME}"
   RAW_FILE_URL="${RAW_BASE_URL}/${BUNDLE_NAME}/master/README.md"
   
   if [ "$CONSOLE" == "true" ]; then
      curl $RAW_FILE_URL
      URL=$RAW_FILE_URL
   else
      if [[ ${OS_NAME} == DARWIN* ]]; then
         open "$BROWSER_URL"
         URL=$BROWSER_URL
      elif [[ ${OS_NAME} == CYGWIN* ]] || [ "$(which cmd.exe)" != "" ]; then
         cmd.exe /c start "" "$BROWSER_URL" > /dev/null 2>&1
         URL=$BROWSER_URL
      else
         curl $RAW_FILE_URL
         URL=$RAW_FILE_URL
      fi
   fi
   
   echo ""
   echo $BROWSER_URL
   echo ""
fi

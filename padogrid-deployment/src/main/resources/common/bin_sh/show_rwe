#!/usr/bin/env bash 

# ========================================================================
# Copyright (c) 2020 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-rwe -vm -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

NAME
   $EXECUTABLE - Display all the workspaces in the current padogrid workspaces environment

SYNOPSIS
   $EXECUTABLE [-rwe rwe_name] [-?]

DESCRIPTION
   Displays a tree view of all the workspaces in the current or specified RWE environment.

   Note that the product displayed in a workspace node is the default product configured
   for that workspace and does not necessarily represent the how the components in the
   workspace are configured. For example, a workspace may contain a cluster configured
   with the default product and yet another cluster with another product.

OPTIONS
   -rwe rwe_name
             If specified then displays the specified RWE environment, otherwise, the current
             RWE enviroment.

   -vm
             Displays only VM workspaces.

DEFAULT
   $EXECUTABLE

SEE ALSO
EOF
   printSeeAlsoList "*workspace*" $EXECUTABLE
   exit
fi

if [ "$PADOGRID_WORKSPACES_HOME" == "" ]; then
   echo >&2 "ERROR: Workspaces not initialized. Please first run 'create_rwe' to initialize workspaces."
   echo >&2 "       Command aborted."
   exit 1
fi
if [ ! -d "$PADOGRID_WORKSPACES_HOME" ]; then
   echo >&2 "ERROR: Invalid workspaces. Please run 'create_rwe' to initialize workspaces."
   echo >&2 "       Command aborted."
   exit 1
fi

if [ "$RWE_ARG" == "" ]; then
   __RWE_PATH="$PADOGRID_WORKSPACES_HOME"
   RWE_NAME=$(basename "$PADOGRID_WORKSPACES_HOME")
else
   RWE_PARENT_DIR="$(dirname "$PADOGRID_WORKSPACES_HOME")"
   __RWE_PATH="$RWE_PARENT_DIR/$RWE_ARG"
   RWE_NAME=$RWE_ARG
   if [ ! -d "$__RWE_PATH" ]; then
      echo >&2 "ERROR: Specified RWE does not exist [$RWE_ARG]. Command aborted."
      exit 1
   elif [ "$(isValidRwe $RWE_ARG)" == "false" ]; then
      echo >&2 "ERROR: Specified RWE is not valid [$RWE_ARG]. Command aborted."
      exit 1
   fi
fi

#
# Returns "true" if the specifie tree node has child nodes (items), otherwse returns "false".
# @param treeNode            Workspace tree node, i.e., "apps", "clusters", etc.
#
function isTreeEmpty
{
   TOP_NODE=$1
   if [ -d "$__RWE_PATH/$WORKSPACE/$TOP_NODE" ]; then
      ITEMS=`ls $__RWE_PATH/$WORKSPACE/$TOP_NODE`
      ITEMS=$(removeTokens "$ITEMS" "initenv.sh setenv.sh")
      ITEMS=( $ITEMS )
      if [ "$ITEMS" != "" ]; then
         echo "false"
      else
         echo "true"
      fi
   else
      echo "true"
   fi
}

#
# Displays the specified tree node
# @param treeNode            Workspace tree node, i.e., "apps", "clusters", etc.
# @param isLastNonEmptyNode  "true" if the tree node is the last node in the workspace tree.
# @param isCurrentWorkspace  "true" if the parent node is the current workspace. This parameter
#                            is used to determine the curretn cluster.
#
function displayTreeNode
{
   TOP_NODE="$1"
   IS_LAST_NON_EMPTY_NODE="$2"
   if [ -d "$__RWE_PATH/$WORKSPACE/$TOP_NODE" ]; then
      ITEMS=`ls $__RWE_PATH/$WORKSPACE/$TOP_NODE`
      ITEMS=$(removeTokens "$ITEMS" "initenv.sh setenv.sh")
      ITEMS=( $ITEMS )
      if [ "$ITEMS" != "" ]; then
      let LAST_INDEX=${#ITEMS[@]}-1
      if [ "$IS_LAST_NON_EMPTY_NODE" == "true" ]; then
         echo "$LEADING_BAR   └── $TOP_NODE"
      else
         echo "$LEADING_BAR   ├── $TOP_NODE"
      fi
      if [ "$IS_LAST_NON_EMPTY_NODE" == "true" ]; then
         CHILD_LEADING_BAR="$LEADING_BAR       "
      else
         CHILD_LEADING_BAR="$LEADING_BAR   │   "
      fi
      local CHilight=""
      for ((i = 0; i < ${#ITEMS[@]}; i++)); do
         if [ "$IS_CURRENT_WORKSPACE" == "true" ] && [ "$TOP_NODE" == "clusters" ] && [ "${ITEMS[$i]}" == "$CLUSTER" ]; then 
            CHilight="${CLightGreen}"
         else
            CHilight="${CNone}"
         fi
         if [ $i -lt $LAST_INDEX ]; then
            echo -e "${CHILD_LEADING_BAR}├── ${CHilight}${ITEMS[$i]}${CNone}"
         else
            echo -e "${CHILD_LEADING_BAR}└── ${CHilight}${ITEMS[$i]}${CNone}"
         fi
      done
      fi
   fi
}

echo ""
echo "$__RWE_PATH"
CURRENT_WORKSPACE="$(basename "$PADOGRID_WORKSPACE")"
WORKSPACES=`list_workspaces -rwe $RWE_NAME`
WORKSPACES=( $WORKSPACES )
let WORKSPACES_LAST_INDEX=${#WORKSPACES[@]}-1
for ((j = 0; j < ${#WORKSPACES[@]}; j++)); do
   WORKSPACE=${WORKSPACES[$j]}
   if [ "$VM_SPECIFIED" == "true" ] && [ "$(isWorkspaceVmEnabled "$WORKSPACE" "$__RWE_PATH")" == "false" ]; then
      continue;
   fi
   WORKSPACE_INFO=$(getWorkspaceInfoList "$WORKSPACE" "$__RWE_PATH")
   if [ $j -lt $WORKSPACES_LAST_INDEX ]; then
      if [ "$WORKSPACE" == "$CURRENT_WORKSPACE" ] && [ "$PADOGRID_WORKSPACES_HOME" == "$__RWE_PATH" ]; then
         echo -e "├── ${CLightGreen}$WORKSPACE [$WORKSPACE_INFO]${CNone}"
	 IS_CURRENT_WORKSPACE="true"
      else
         echo "├── $WORKSPACE [$WORKSPACE_INFO]"
	 IS_CURRENT_WORKSPACE="false"
      fi
      LEADING_BAR="│"
   else
      if [ "$WORKSPACE" == "$CURRENT_WORKSPACE" ] && [ "$PADOGRID_WORKSPACES_HOME" == "$__RWE_PATH" ]; then
         echo -e "└── ${CLightGreen}$WORKSPACE [$WORKSPACE_INFO]${CNone}"
	 IS_CURRENT_WORKSPACE="true"
      else
         echo "└── $WORKSPACE [$WORKSPACE_INFO]"
	 IS_CURRENT_WORKSPACE="false"
      fi
      LEADING_BAR=" "
   fi

   NODES="apps clusters docker k8s pods"
   LAST_NON_EMPTY_NODE=""
   for NODE in $NODES; do
      IS_EMPTY=$(isTreeEmpty "$NODE")
      if [ "$IS_EMPTY" == "false" ]; then
         LAST_NON_EMPTY_NODE="$NODE"
      fi
   done
   
   for NODE in $NODES; do
      if [ "$NODE" == "$LAST_NON_EMPTY_NODE" ]; then
         displayTreeNode "$NODE" "true" "$IS_CURRENT_WORKSPACE"
      else
         displayTreeNode "$NODE" "false" "$IS_CURRENT_WORKSPACE"
      fi
   done
done
echo ""

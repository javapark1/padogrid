# -------------------------------------------------------------------------
# Overview:
#
# Group test cases allow you to create and test groups of Kafka operations.
# You can think of a group as a function invoking one or more Kafka operations.
# As an example, a group could contain send, sendbatch, send, sendbatch calls
# making a total of four (4) Kafka topic calls. You can designate threads to
# invoke this group and measure the average latency of each group (function) call.
# -------------------------------------------------------------------------

# The number of test runs.
# Default: 1
testCount=1

# Interval between test runs in msec.
# Default: 0
testIntervalInMsec=0

# Print status interval in sec. The application prints status in this interval
# to the console.
# Default: 10 sec
printStatusIntervalInSec=10

# Turn off logging (recommended)
kafka-addon.logging.type=none

# Group names separated by ',' or '&'. If ',', then the next group executes after
# the current group completes. If '&', then the current group and the next group
# execute concurrently. Note that testCount applies per group. For example, if
# testCount=2 and groupName=g1&g2,g3 then g1 and g2 execute concurrently twice
# before g3 executes twice.
groupNames=g1&g2

# -------------------------------------------------------------------------
# Group:
#
# A group represents a function that invokes one or more Kafka operations.
#
# name         Group name.
#
# threadCount  The number of threads per group test.
#
#              Default: (processor count * 1.5).
#
# operations  Comma separated list of operations to perform. Operations are
#             individually defined. See the "Operations" section for details.
#             The listed operations are invoked sequentially per group invocation.
#             For example, if totalInvocationCount=1000 then the operations listed
#             will be invoked 1000 times in the order they are listed.
#
# totalInvocationCount Total number of group invocations.
# 
# comment     Any text describing the group. 
# -------------------------------------------------------------------------

# g1 sends 100,000 1 KiB objects into map1 defined by the 'send1' operation.
# Note that you can list more than one operation.
g1.name=Send Test
g1.threadCount=8
g1.operations=send1
g1.comment=KafkaProducer.send() test (1 KiB payload in map1)
g1.totalInvocationCount=100000

# g2 performs bulk sends using KafkaProducer.send()
g2.name=SendBatch Test
g2.threadCount=8
g2.operations=sendbatch1
g2.comment=KafkaProducer.send() batch test (1 KiB payload in map2)
g2.totalInvocationCount=1000

# -------------------------------------------------------------------------
# Test Cases:
#
# 'test_group' supports KafkaProducer only. The supported test cases are 'send'
# and 'sendbatch'. Both test cases are identical except for the batch properties 
# that can be set for 'sendbatch' in this file. They both invoke KafkaProducer.send().
#
# 'send' is configured only with '../etc/kafka-producer.properties'.
#
# 'sendbatch' is also configured with '../etc/kafka-producer.properties'
# but the following properties can be overwritten via their respective 'perf_test'
# properties set in this file.
#
# | KafkaProducer    | test_group      |
# | ---------------- | --------------- |
# | batch.size       | kafka.batchSize |
# | linger.ms        | kafka.lignerMs  |
#
# For KafkaConsumer, please use the 'subscribe_topic' command.
# -------------------------------------------------------------------------

# -------------------------------------------------------------------------
# Operations:
#
# topic | sleep
#                 Data structure name. This parameter specifies the name of the
#                 data structure pertaining to the specified test case.
#
#                 The 'sleep' operation sleeps for the specified amount of time
#                 in milliseconds. It has no other attributes. For example, 
#                 'sleep10.sleep=10', sleeps for 10 milliseconds before executing
#                 the next operation in the group.
#
# ref             The test case reference name. The defining test case inherits
#                 all values set by the referenced test case. Referenced properties
#                 are overwritten if defined.
#
# testCase        Test case.
#                 If invalid values are entered then the default value is assigned.
#
#                 Valid Test Cases: 
#                   - topic: send, sendbatch    - Default: sendbatch
#
# payloadSize     The value object size in bytes. The value object is a blob
#                 object containing the specified payload size in the form of
#                 byte array. Note that the key objects are String objects with
#                 the prefix defined by the key.prefix property. This property is
#                 used by the following test cases only.
#
#                 Used By: send, sendbatch
#                 Default: 1024
#
# batchSize       The number of objects per sendbatch call per thread. For each sendbatch
#                 call, KafkaProducer.send() is iteratively invoked for this number
#                 of times in each thread. Note that batchSize sets the number of objects
#                 and kafka.batchSize sets the Kafka producer batch size in bytes.
#
#                 Used By: sendbatch
#                 Default: 100
#
# kafka.batchSize The Kafka producer batch size in bytes for sendbatch. For send, Kafka
#                 producer, by default, is configured with the default value shown below.
#
#                 Used By: sendbatch
#                 Default: 16384
#
# kafka.lingerMs  Message delivery delay in msec for batching. Kafka producer waits for
#                 up to this amount of time before sending each batch of messages if 
#                 their sizes are less than the 'batchSize' value.
#
#                 Used By: sendbatch
#                 Default: 0 (no delay)
#
# kafka.compression   Compression type.
#
#                 Used By: send, sendbatch
#                 Default: none
#
#                 Supported types are as follows.
#
#                 | Compression  | Compression | CPU      | Compression | Network         |
#                 | type         | ratio       | usage    | speed 	    | bandwidth usage |
#                 | ------------ | ----------- | -------- | ----------- | --------------- |
#                 | none         | N/A         | N/A      | N/A         | Highest         |
#                 | gzip         | Highest     | Highest  | Slowest     | Lowest          |
#                 | lz4          | Low         | Lowest   | Fastest     | Highest         |
#                 | snappy       | Medium      | Moderate | Moderate    | Medium          |
#                 | zstd         | Medium      | Moderate | Moderate    | Medium          |
#
# totalEntryCount The total number of entries per group per test run.
#
#                 Used By: send, sendbatch
#                 Default: 10000
#
# key.prefix      Key names begin with this value. This parameter is optional.
#
#                 Used By: send, sendbatch
#                 Default: k
#
# key.startNum    Key start number. Each key name starts with the prefix defined by
#                 the key.prefix property followed by a number that is increased
#                 incrementally starting from this value. For example, 
#                 key.prefix=a and key.startNum=10 produces the first key name, "a10".
#
#                 Used By: send, sendbatch
#                 Default: 1
# -------------------------------------------------------------------------

# send1
send1.topic=map1
send1.testCase=send
send1.payloadSize=1024
send1.key.prefix=a
send1.key.startNum=1

# sendbatch1
sendbatch1.topic=map2
sendbatch1.testCase=sendbatch
sendbatch1.totalEntryCount=100000
sendbatch1.payloadSize=1024
# object count per batch
sendbatch1.batchSize=100
# kafka.batchSize in bytes
sendbatch1.kafka.batchSize=102400
# kafka.lingerMs in msec
sendbatch1.kafka.lingerMs=20
# kafka.compresstion type
sendbatch1.kafka.compression=none
sendbatch1.key.prefix=a
sendbatch1.key.startNum=1
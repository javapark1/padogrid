# -------------------------------------------------------------------------
# Overview:
#
# Group test cases allow you to create and test groups of Kafka operations.
# You can think of a group as a function invoking one or more Kafka operations.
# As an example, a group could contain send, poll, send, poll calls making a total
# of four (4) Kafka topic calls. You can designate threads to invoke this
# group and measure the average latency of each group (function) call.
# -------------------------------------------------------------------------

# The number of test runs.
# Default: 1
testCount=1

# Interval between test runs in msec.
# Default: 0
testIntervalInMsec=0

# Print status interval in sec. The application prints status in this interval
# to the console.
# Default: 10 sec
printStatusIntervalInSec=10

# Turn off logging (recommended)
kafka-addon.logging.type=none

# Group names separated by commas. The listed groups are executed concurrently.
groupNames=g1

# -------------------------------------------------------------------------
# Group:
#
# A group represents a function that invokes one or more Kafka operations.
#
# name         Group name.
#
# threadCount  The number of threads per group test.
#
#              Default: (processor count * 1.5).
#
# operations  Comma separated list of operations to perform. Operations are
#             individually defined. See the "Operations" section for details.
#             The listed operations are invoked sequentially per group invocation.
#             For example, if totalInvocationCount=1000 then the operations listed
#             will be invoked 1000 times in the order they are listed.
#
# totalInvocationCount Total number of group invocations.
# 
# comment     Any text describing the group. 
# -------------------------------------------------------------------------

# Invoke 22 operations that ingest data into Kafka using KafkaProducer.send()
g1.name=Multi-Send
g1.threadCount=10
g1.operations=send1,send2,send3,send4,send5,send6,send7,send8,send9,send10,send11,send12,send13,send14,send15,send16,send17,send18,send19,send20,send21,send22
g1.comment=Populates 22 maps in preparation for multi-get tests. Cluster size should be >20 GiB.
g1.totalInvocationCount=1000

# -------------------------------------------------------------------------
# Test Cases:
#
# 'test_group' supports KafkaProducer only. The supported test cases are 'send'
# and 'sendbatch'. Both test cases are identical except for the batch properties 
# that can be set for 'sendbatch' in this file. They both invoke KafkaProducer.send().
#
# 'send' is configured only with '../etc/kafka-producer.properties'.
#
# 'sendbatch' is also configured with '../etc/kafka-producer.properties'
# but the following properties can be overwritten via their respective 'perf_test'
# properties set in this file.
#
# | KafkaProducer    | test_group      |
# | ---------------- | --------------- |
# | batch.size       | kafka.batchSize |
# | linger.ms        | kafka.lignerMs  |
#
# For KafkaConsumer, please use the 'subscribe_topic' command.
# -------------------------------------------------------------------------

# -------------------------------------------------------------------------
# Operations:
#
# topic | sleep
#                 Data structure name. This parameter specifies the name of the
#                 data structure pertaining to the specified test case.
#
#                 The 'sleep' operation sleeps for the specified amount of time
#                 in milliseconds. It has no other attributes. For example, 
#                 'sleep10.sleep=10', sleeps for 10 milliseconds before executing
#                 the next operation in the group.
#
# ref             The test case reference name. The defining test case inherits
#                 all values set by the referenced test case. Referenced properties
#                 are overwritten if defined.
#
# testCase        Test case.
#                 If invalid values are entered then the default value is assigned.
#
#                 Valid Test Cases: 
#                   - topic: send, sendbatch    - Default: sendbatch
#
# payloadSize     The value object size in bytes. The value object is a blob
#                 object containing the specified payload size in the form of
#                 byte array. Note that the key objects are String objects with
#                 the prefix defined by the key.prefix property. This property is
#                 used by the following test cases only.
#
#                 Used By: send, sendbatch
#                 Default: 1024
#
# batchSize       The number of objects per sendbatch call per thread. For each sendbatch
#                 call, KafkaProducer.send() is iteratively invoked for this number
#                 of times in each thread. Note that batchSize sets the number of objects
#                 and kafka.batchSize sets the Kafka producer batch size in bytes.
#
#                 Used By: sendbatch
#                 Default: 100
#
# kafka.batchSize The Kafka producer batch size in bytes for sendbatch. For send, Kafka
#                 producer, by default, is configured with the default value shown below.
#
#                 Used By: sendbatch
#                 Default: 16384
#
# kafka.lingerMs  Message delivery delay in msec for batching. Kafka producer waits for
#                 up to this amount of time before sending each batch of messages if 
#                 their sizes are less than the 'batchSize' value.
#
#                 Used By: sendbatch
#                 Default: 0 (no delay)
#
# kafka.compression   Compression type.
#
#                 Used By: send, sendbatch
#                 Default: none
#
#                 Supported types are as follows.
#
#                 | Compression  | Compression | CPU      | Compression | Network         |
#                 | type         | ratio       | usage    | speed 	    | bandwidth usage |
#                 | ------------ | ----------- | -------- | ----------- | --------------- |
#                 | none         | N/A         | N/A      | N/A         | Highest         |
#                 | gzip         | Highest     | Highest  | Slowest     | Lowest          |
#                 | lz4          | Low         | Lowest   | Fastest     | Highest         |
#                 | snappy       | Medium      | Moderate | Moderate    | Medium          |
#                 | zstd         | Medium      | Moderate | Moderate    | Medium          |
#
# totalEntryCount The total number of entries per group per test run.
#
#                 Used By: send, sendbatch
#                 Default: 10000
#
# key.prefix      Key names begin with this value. This parameter is optional.
#
#                 Used By: send, sendbatch
#                 Default: k
#
# key.startNum    Key start number. Each key name starts with the prefix defined by
#                 the key.prefix property followed by a number that is increased
#                 incrementally starting from this value. For example, 
#                 key.prefix=a and key.startNum=10 produces the first key name, "a10".
#
#                 Used By: send, sendbatch
#                 Default: 1
# -------------------------------------------------------------------------

# HINT: sendall
# To send totalEntryCount objects, totalInvocationCount * batchSize must equal
# to totalEntryCount. See above for details.

# -------------------------------------------------------------------------
# Data Ingestion Breakdown:
#
#       Maps   Count     Payload(B)  Size(GiB)
#       ----  ---------  ----------  ---------
#         10  1,000,000        1024      10
#          5    500,000        1024       2.5
#          4    100,000        1024       0.4
#          3     10,000        1024       0.03
#      -----  ---------  ----------  ---------
# Total:  22  1,610,000         N/A      12.93
# -------------------------------------------------------------------------

send1.topic=map1
send1.testCase=sendbatch
send1.totalEntryCount=1000000
send1.payloadSize=1024
send1.key.prefix=a
send1.key.startNum=1

send2.ref=send1
send2.topic=map2

send3.ref=send1
send3.topic=map3

send4.ref=send1
send4.topic=map4

send5.ref=send1
send5.topic=map5

send6.ref=send1
send6.topic=map6

send7.ref=send1
send7.topic=map7

send8.ref=send1
send8.topic=map8

send9.ref=send1
send9.topic=map9

send10.ref=send1
send10.topic=map10

send11.topic=map11
send11.testCase=sendbatch
send11.totalEntryCount=500000
send11.payloadSize=1024
send11.batchSize=1000
send11.key.prefix=a
send11.key.startNum=1

send12.ref=send11
send12.topic=map12

send13.ref=send11
send13.topic=map13

send14.ref=send11
send14.topic=map14

send15.ref=send11
send15.topic=map15

send16.topic=map16
send16.testCase=sendbatch
send16.totalEntryCount=100000
send16.payloadSize=1024
send16.batchSize=1000
send16.key.prefix=a
send16.key.startNum=1

send17.ref=send16
send17.topic=map17

send18.ref=send16
send18.topic=map18

send19.ref=send16
send19.topic=map19

send20.topic=map20
send20.testCase=sendbatch
send20.totalEntryCount=10000
send20.payloadSize=1024
send20.batchSize=1000
send20.key.prefix=a
send20.key.startNum=1

send21.ref=send20
send21.topic=map21

send22.ref=send20
send22.topic=map22


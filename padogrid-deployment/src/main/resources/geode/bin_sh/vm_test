#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -vm -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

#
# Determeint $TAR_BALL_PATH
#
ROOT_DIR_NAME=$(basename $BASE_DIR)
TOP_DIR="$(dirname "$BASE_DIR")"
TAR_BALL_GZ_NAME=$ROOT_DIR_NAME.tar.gz
TAR_BALL_GZ_PATH=$BASE_DIR/bundles/$TAR_BALL_GZ_NAME

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Test the VM workspace configurations

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-vm comma_separated_hosts] [-?]

DESCRIPTION
   Tests workspace configurations of all the VMs defined by the VM_HOSTS environment
   variable in the workspace 'setenv.sh' file. To test the cluster VMs, specify the
   cluster with the '-cluster' option. To test a select list of VMs, specify the VM
   list with the '-vm' option.

   It reports each VM's configuration status for troubleshooting any VM-related issues
   before executing the 'vm_sync' command to synchronize the workspace environment.

   Note that this command and all other commands that begin with the "vm_" preprefix are
   available only on VM workspaces.

   The '-vm' option overrides both the '-cluster' option and VM_HOSTS. The '-cluster' option
   overrides VM_HOSTS. 

OPTIONS
   -cluster cluster_name
             Cluster name.

   -vm comma_separated_hosts
             A comma separated list of VM hosts or addresses. If the list contains spaces
             then enclosed it in quotes. This option overrides the workspace's VM_HOSTS set
             in the 'setenv.sh' file.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER file_path

FILES
   $PADOGRID_WORKSPACE/setenv.sh
             The current workspace configuration file.
EOF
fi
cat <<EOF

SEE ALSO
EOF
   printSeeAlsoList "vm_*" $EXECUTABLE
   exit
fi

# Available only on VM workspaces
if [ "$VM_ENABLED" != "true" ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "    ERROR: The workspace is not a VM workspace. Command aborted."
   echo "----------------------------------------------------------------"
   exit 1 
fi

# If the -vm option is specified then it overrides all other options
if [ "$VM_SPECIFIED" == "true" ]; then
   if [ "$VM_HOSTS_ARG" != "" ] && [[ "$VM_HOSTS_ARG" != *"-"* ]]; then
      VM_HOSTS=$VM_HOSTS_ARG
   else
      echo "----------------------------------------------------------------"
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo >&2 "ERROR: Invalid value for -vm [$VM_HOSTS_ARG]. Command aborted."
      echo "----------------------------------------------------------------"
      exit 1
   fi
else
   # The -cluster option overrides VM_HOSTS
   if [ "$CLUSTER_SPECIFIED" == "true" ]; then
      if [ "`isClusterExist "$CLUSTER"`" == "false" ]; then 
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Cluster does not exist [$CLUSTER]. Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
      if [ "$VM_ENABLED" == "false" ]; then
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Not a VM cluster [$CLUSTER]. To enable VMs, set the 'vm.enabled' property"
         echo >&2 "       in the 'etc/cluster.properties' file."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_HOSTS=`getClusterProperty "vm.hosts"`
      if [ "$VM_HOSTS" == "" ]; then
         if [ "$VM_HOSTS" == "" ]; then
            echo "----------------------------------------------------------------"
            echo "WORKSPACE: $PADOGRID_WORKSPACE"
            echo >&2 "    ERROR: The 'vm.hosts' property is not set in the 'etc/cluster.properties' file."
            echo >&2 "           file. Command aborted."
            echo "----------------------------------------------------------------"
            exit 1
         fi
      fi
   fi
fi

WORKSPACE_NAME=$(basename "$PADOGRID_WORKSPACE")

# Replace , with space
__VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
DEFAULT_USER=$(whoami)
if [ "$VM_USER" == "" ]; then
   VM_USER=$DEFAULT_USER
fi

if [ "$VM_PRIVATE_KEY_FILE" == "" ]; then
   if [ -f $PADOGRID_WORKSPACE/*.pem ]; then
      for i in $PADOGRID_WORKSPACE/*.pem; do
         VM_PRIVATE_KEY_FILE=$i
         break
      done
   fi
fi
if [ "$KEY" == "" ]; then
   KEY=$VM_PRIVATE_KEY_FILE
fi
VM_KEY=""
if [ "$KEY" != "" ]; then 
   if [ ! -f "$KEY" ]; then
      echo >&2 "ERROR: Specified private key does not exist [$KEY]."
      echo >&2 "       Command aborted."
      exit 1
   fi
   VM_KEY="-i $KEY"
fi

# Fail fast: Exit if any of the hosts is not reachable
for VM_HOST in $__VM_HOSTS; do
   REPLY=$(ssh -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT -o PasswordAuthentication=no "echo hello" 2>&1)
   EXIT_CODE=$?
   if [ "$EXIT_CODE" != "0" ]; then
      echo -e "ERROR: $VM_HOST - ${CLightRed}Failed${CNone} ($REPLY)"
      echo "       Command aborted."
      exit 1
   fi
done

if [ "$VM_ENABLED" == "true" ]; then
   ISSUES_FOUND="false"
else
   ISSUES_FOUND="true"
fi

# Display VM configuration info
cat <<EOF
------------------------------------------------------------------------------------------
Workspace: $WORKSPACE

Environment:
              VM_ENABLED=$VM_ENABLED
                VM_HOSTS=$VM_HOSTS
                 VM_USER=$VM_USER
     VM_PRIVATE_KEY_FILE=$VM_PRIVATE_KEY_FILE
            VM_JAVA_HOME=$VM_JAVA_HOME
           VM_GEODE_HOME=$VM_GEODE_HOME
        VM_PADOGRID_HOME=$VM_PADOGRID_HOME
   VM_PADOGRID_WORKSPACE=$VM_PADOGRID_WORKSPACE
------------------------------------------------------------------------------------------
EOF

# Check ssh sessions
NETWORK_ISSUES_VM_HOSTS=""
echo "------------------------------------------------------------------------------------------"
echo "Network Test:"
for VM_HOST in $__VM_HOSTS; do
  REPLY=$(ssh -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT -o PasswordAuthentication=no "echo hello" 2>&1)
  EXIT_CODE=$?
  if [ "$EXIT_CODE" != "0" ]; then
     echo -e "   $VM_HOST - ${CLightRed}Failed${CNone} ($REPLY)"
     ISSUES_FOUND="true"
     NETWORK_ISSUES_VM_HOSTS="$NETWORK_ISSUES_VM_HOSTS $VM_HOST" 
  else
     echo -e "   $VM_HOST - ${CLightGreen}OK${CNone}"
  fi
done
echo "------------------------------------------------------------------------------------------"

# Determine and display all VMs that do not have Java and Geode installed.
SOFTWARE_ISSUES_FOUND="false"
ADDON_COMMAND="if [ -d "$VM_PADOGRID_HOME" ]; then echo true; else echo false; fi"
JAVA_HOME_COMMAND="if [ -d "$VM_JAVA_HOME" ]; then echo true; else echo false; fi"
GEODE_HOME_COMMAND="if [ -d "$VM_GEODE_HOME" ]; then echo true; else echo false; fi"
ADDON_NOT_FOUND_LIST=""
JAVA_HOME_NOT_FOUND_LIST=""
GEODE_HOME_NOT_FOUND_LIST=""
for VM_HOST in $__VM_HOSTS; do
   ADDON_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$ADDON_COMMAND")
   JAVA_HOME_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$JAVA_HOME_COMMAND")
   GEODE_HOME_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$GEODE_HOME_COMMAND")
   if [[ "$ADDON_EXISTS" == *"false" ]]; then
      ADDON_NOT_FOUND_LIST="$ADDON_NOT_FOUND_LIST $VM_HOST"
   fi
   if [[ "$JAVA_HOME_EXISTS" == *"false" ]]; then
      JAVA_HOME_NOT_FOUND_LIST="$JAVA_HOME_NOT_FOUND_LIST $VM_HOST"
      ISSUES_FOUND="true"
      SOFTWARE_ISSUES_FOUND="true"
   fi
   if [[ "$GEODE_HOME_EXISTS" == *"false" ]]; then
      GEODE_HOME_NOT_FOUND_LIST="$GEODE_HOME_NOT_FOUND_LIST $VM_HOST"
      ISSUES_FOUND="true"
      SOFTWARE_ISSUES_FOUND="true"
   fi
done

if [ "$JAVA_HOME_NOT_FOUND_LIST" != "" ]; then
   JAVA_DIR_NAME=$(basename $VM_JAVA_HOME)
   echo "------------------------------------------------------------------------------------------"
   echo -e "${CBrownOrange}WARNING:${CNone}"
   echo "   Java is not installed on the following VMs. The workspace will not be operational"
   echo "   until you install Java on these VMs."
   echo -e "      ${CLightRed}$JAVA_HOME_NOT_FOUND_LIST${CNone}"
   echo ""
   echo "VM Java Home Path:"
   echo "      $VM_JAVA_HOME"
   echo ""
   echo "   To install Java on the above VMs, download the correct version of Java and execute 'vm_install'."
   echo ""
   echo "   Example:"
   echo "      vm_install -java $JAVA_DIR_NAME.tar.gz"
   echo "------------------------------------------------------------------------------------------"
fi
if [ "$GEODE_HOME_NOT_FOUND_LIST" != "" ]; then
   GEODE_DIR_NAME=$(basename $VM_GEODE_HOME)
   echo "------------------------------------------------------------------------------------------"
   echo -e "${CBrownOrange}WARNING:${CNone}"
   echo "$VM_GEODE_HOME"
   echo "   Geode is not installed on the following VMs. The workspace will not be operational"
   echo "   until you install Geode on these VMs."
   echo -e "      ${CLightRed}$GEODE_HOME_NOT_FOUND_LIST${CNone}"
   echo ""
   echo "VM Geode Path:"
   echo "    $VM_GEODE_HOME"
   echo ""
   echo "   To install Geode on the above VMs, download the correct version of Geode and"
   echo "   execute 'vm_install'."
   echo ""
   echo "   Example:"
   echo "      vm_install -product $GEODE_DIR_NAME.tar.gz"
   echo "------------------------------------------------------------------------------------------"
fi
if [ "$ADDON_NOT_FOUND_LIST" != "" ]; then
   echo "------------------------------------------------------------------------------------------"
   echo "$VM_PADOGRID_HOME"
   echo "   padogrid is not installed on the following VMs. It will be automatically installed"
   echo "   when you execute 'vm_sync'."
   echo "      $ADDON_NOT_FOUND_LIST"
   echo "------------------------------------------------------------------------------------------"
fi

# Display cluster info
if [ "$CLUSTER_SPECIFIED" == "true" ]; then
__VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
__VM_HOSTS_CLUSTER=`getClusterProperty "vm.hosts"`
__VM_USER=`getClusterProperty "vm.user" "$DEFAULT_USER"`
__VM_PRIVATE_KEY_FILE=`getClusterProperty "vm.privateKeyFile"`
cat <<EOF
------------------------------------------------------------------------------------------
Cluster: $CLUSTER

Cluster Properties File:
   $ETC_DIR/cluster.properties

Environment:
          vm.enabled=$__VM_ENABLED
            vm.hosts=$__VM_HOSTS_CLUSTER
             vm.user=$__VM_USER
   vm.privateKeyFile=$__VM_PRIVATE_KEY_FILE

EOF

CLUSTER_ISSUES_FOUND="false"
if [ "$__VM_ENABLED" != "true" ]; then
   echo "The cluster is not VM enabled."
   CLUSTER_ISSUES_FOUND="true"
fi
if [ "$__VM_HOSTS" != "$VM_HOSTS" ]; then
   echo "The cluster VM host list is different from the workspace VM host list."
   CLUSTER_ISSUES_FOUND="true"
fi
if [ "$__VM_USER" != "$VM_USER" ]; then
   echo "The cluster VM user name is different from the workspace VM user name."
   CLUSTER_ISSUES_FOUND="true"
fi
if [ "$__VM_PRIVATE_KEY_FILE" != "$VM_PRIVATE_KEY_FILE" ]; then
   echo "The cluster VM private key file is different from the workspace VM private key file."
   CLUSTER_ISSUES_FOUND="true"
fi

if [ "$__VM_ENABLED" == "$VM_ENABLED" ] && 
   [ "$__VM_HOSTS" == "$VM_HOSTS" ] &&
   [ "$__VM_USER" == "$VM_USER" ] &&
   [ "$__VM_PRIVATE_KEY_FILE" == "$__VM_PRIVATE_KEY_FILE" ]; then
   echo "The cluster VM environment setup is identical to the workspace VM environment setup."
fi

# Check if the cluster has been deployed
CLUSTER_NOT_FOUND_LIST=""
# Replace , with space
__VM_HOSTS=$(echo "$__VM_HOSTS_CLUSTER" | sed "s/,/ /g")
if [ "$NETWORK_ISSUES_VM_HOSTS" == "" ]; then
   CLUSTER_COMMAND="if [ -d "$VM_PADOGRID_WORKSPACE/clusters/$CLUSTER" ]; then echo true; else echo false; fi"
   for VM_HOST in $__VM_HOSTS; do
      CLUSTER_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$CLUSTER_COMMAND")
      if [[ "$CLUSTER_EXISTS" == *"false" ]]; then
	 CLUSTER_NOT_FOUND_LIST="$CLUSTER_NOT_FOUND_LIST $VM_HOST"
	 CLUSTER_ISSUES_FOUND=true
      fi
   done
fi
echo "------------------------------------------------------------------------------------------"
fi

# Summary
echo "------------------------------------------------------------------------------------------"
echo "Summary:"
if [ "$ISSUES_FOUND" == "true" ]; then
   echo -e "   ${CLightRed}One or more VM issues found. Please correct them before executing 'vm_sync'.${CNone}"
else
   echo -e "   ${CLightGreen}No issues found.${CNone} To sync the VM workspace, execute 'vm_sync'."
fi
echo ""
echo "Workspace Issues: "
if [ "$VM_ENABLED" != "true" ]; then
   echo "   VM disabled. Set VM_ENABLED=true in the workspace 'setenv.sh' file."
else
   echo -e "   ${CLightGreen}None.${CNone}"
fi
echo "Network Issues: "
if [ "$NETWORK_ISSUES_VM_HOSTS" != "" ]; then
   echo "   The following VMs encountered network issues."
   echo -e "      ${CLightRed}$NETWORK_ISSUES_VM_HOSTS${CNone}"
else
   echo -e "   ${CLightGreen}None.${CNone}"
fi
echo "Software Issues: "
if [ "$SOFTWARE_ISSUES_FOUND" != "true" ]; then
   echo -e "   ${CLightGreen}None.${CNone}"
else
   if [ "$JAVA_HOME_NOT_FOUND_LIST" != "" ]; then
      echo -e "   ${CLightRed}Java missing${CNone} from the following VMs. Install Java with 'vm_install -java'."
      echo "     $JAVA_HOME_NOT_FOUND_LIST"
   fi
   if [ "$GEODE_HOME_EXISTS" != "" ]; then
      echo -e "   ${CLightRed}Geode missing${CNone} from the following VMs. Install Geode with 'vm_install -product'."
      echo "     $GEODE_HOME_NOT_FOUND_LIST"
   fi
fi
if [ "$CLUSTER_SPECIFIED" == "true" ]; then
echo "Cluster Issues: "
if [ "$CLUSTER_ISSUES_FOUND" == "true" ]; then
   if [ "$CLUSTER_NOT_FOUND_LIST" != "" ]; then
      echo "   The following VM hosts do not have the '$CLUSTER' cluster deployed."
      echo -e "     ${CLightRed}$CLUSTER_NOT_FOUND_LIST${CNone}"
   else
      echo "   The cluster VM environment is different from the workspace VM environment. This might" 
      echo "   not be an error as cluster settings are typically a subset of the workspace settings."
      echo "   Please verify."
   fi
else
   echo -e "   ${CLightGreen}None.${CNone}"
fi
fi
echo "------------------------------------------------------------------------------------------"


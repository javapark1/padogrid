#!/usr/bin/env bash
SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

if [ "$HELP" == "true" ]; then
cat <<EOF

NAME
   $EXECUTABLE - Start a Hazelcast using Helm charts

SYNOPSIS
   $EXECUTABLE [-?]

DESCRIPTION
   Starts the Hazelcast cluster configured by the 'build_app' script.

DEFAULT:
   ./$EXECUTABLE

SEE ALSO
   https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration/openshift/hazelcast-cluster

EOF
exit
fi

echo -e "Project: ${CLightGreen}${APP_NAME}${CNone}"

CURRENT_PROJECT=$(oc project -q)
if [ "$CURRENT_PROJECT" != "$APP_NAME" ]; then
   oc project $APP_NAME
fi

pushd $APP_DIR/hazelcast > /dev/null

IS_ENTERPRISE="false"
if [ "$OSS" == "true" ] || [ "$IMDG_LICENSE_KEY" == "" ]; then
  HAZELCAST_YAML="hazelcast.yaml"
elif [ "$RHEL" == "true" ]; then
  IS_ENTERPRISE="true"
  HAZELCAST_YAML="hazelcast-enterprise-rhel.yaml"
else
  IS_ENTERPRISE="true"
  HAZELCAST_YAML="hazelcast-enterprise.yaml"
fi

if [ "$WAN" == "true" ] && [ "$IS_ENTERPRISE" == "true" ]; then
   TEMPLATE_HAZELCAST_YAML=$APP_DIR/templates/hazelcast/wan/$HAZELCAST_YAML
   if [ "$WAN_ARG" != "" ]; then
      WAN_TARGET_ENDPOINTS="$WAN_ARG"
   elif [ "$WAN_TARGET_ENDPOINTS" == "" ]; then
      WAN_TARGET_ENDPOINTS="$MASTER_NODE:$WAN_TARGET_PORT"
   else
      WAN_TARGET_ENDPOINTS="$WAN_TARGET_ENDPOINTS"
   fi
else
   TEMPLATE_HAZELCAST_YAML=$APP_DIR/templates/hazelcast/$HAZELCAST_YAML
fi


echo ""
echo "Starting Hazelcast..."
echo ""

# Create cluster role
echo "Applying RBAC..."
oc apply -f rbac.yaml

echo -e "Hazelcast configuration: ${CLightGreen}hazelcast/${HAZELCAST_YAML}${CNone}"
if [ "$WAN_TARGET_ENDPOINTS" != "" ]; then
   echo -e "   WAN target endpoints: ${CLightGreen}${WAN_TARGET_ENDPOINTS}${CNone}"
fi
echo ""
if [ "$IS_ENTERPRISE" == "true" ]; then
   echo -e "Starting ${CLightGreen}enterpise${CNone}..."
   oc create secret generic hz-enterprise-license --from-literal=key=$IMDG_LICENSE_KEY
   oc new-app -f $HAZELCAST_YAML -p NAMESPACE=$(oc project -q) -p ENTERPRISE_LICENSE_KEY=$IMDG_LICENSE_KEY -p HAZELCAST_REPLICAS=3
else
   echo "Starting ${CLightGreen}oss${CNone}..."
   oc create secret generic hz-enterprise-license --from-literal=key=$IMDG_LICENSE_KEY
   oc new-app -f hazelcast.yaml -p NAMESPACE=$(oc project -q)
fi

# Create the load balancer service
echo "Creating services..."
oc apply -f service-lb.yaml
oc apply -f service-lb-pods.yaml

# Expose the Hazelcast and Management Center service.
echo "Exposing services (routes)..."
oc expose svc/hazelcast-service-lb
let LAST_MEMBER_NUM=MEMBER_COUNT-1
for i in $(seq 0 $LAST_MEMBER_NUM); do
   oc expose svc/hazelcast-service-$i
done
if [ "$IMDG_LICENSE_KEY" != "" ] && [ "$OSS" == "false" ]; then
   oc expose svc/management-center-service
fi
echo ""
echo "One (1) service for headless cluster IP and $MEMBER_COUNT services for pods exposed."
echo "In addition to these services, to expose NodePort services, execute the following:"
echo "   oc apply -f ../hazelcast/service-nodeport.yaml"
echo "   oc apply -f ../hazelcast/service-nodeport-pods.yaml"
echo "   oc expose svc/hazelcast-service-nodeport"
for i in $(seq 0 $LAST_MEMBER_NUM); do
   echo "   oc expose svc/hazelcast-service-nodeport-$i"
done
echo ""
echo "Services expose external IPs so that external applications can connect to the Hazelcast cluster by"
echo "configuring Smart Client. If Smart Client does not work, then your OpenShift cluster has been"
echo "configured to block external IPs from being created. If you must use Smart Client then please"
echo "consult your OpenShift administrator to lift this restriction. If Smart Client is not an option,"
echo "then you can use Dummy Client instead."
echo ""
echo "You can also use the PadoGrid container to connect to the Hazelcast cluster. The PadoGrid container"
echo "uses the Kuberntees DNS service to connect to the Hazelcast cluster as Smart Client."
echo ""
echo "Please see ../README.md for instructions on how to configure and run Hazelcast clients."
echo ""
popd > /dev/null

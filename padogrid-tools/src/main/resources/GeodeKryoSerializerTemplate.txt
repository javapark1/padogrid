package ${KRYO_SERIALIZER_PACKAGE};

import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.geode.DataSerializer;

import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.io.Input;
import com.esotericsoftware.kryo.io.Output;

/**
 * This class is generated by the PadoGrid Code Generator. You may modify this
 * class as needed. It will not be overwritten when you generate it again later.
 * 
 * @since ${DATE}
 * @author ${AUTHOR}
 * @see <a href="https://github.com/padogrid/padogrid">https://github.com/padogrid/padogrid</a>
 */
public class KryoSerializer extends DataSerializer {

	private static final ThreadLocal<Kryo> kryoThreadLocal = new ThreadLocal<Kryo>() {

		@Override
		protected Kryo initialValue() {
			Kryo kryo = new Kryo();
			return kryo;
		}
	};
	
	private static Class<?>[] classes = new Class<?>[] {
		${CLASSES}
	};
	
	private static Map<Class<?>, Integer> classMap = new HashMap<Class<?>, Integer>(classes.length, 1f);
	
	static {
		int i = 0;
		for (Class<?> clazz : classes) {
			classMap.put(clazz, i++);
		}
	}
	
	public static List<Class<?>> getClassList()
	{
		return Collections.unmodifiableList(Arrays.asList(classes));
	}
	
	public static Integer getClassId(Class<?> clazz) {
		return classMap.get(clazz);
	}
	
	public static int getLastClassId()
	{
		return classes.length - 1;
	}
	
	@Override
	public Class<?>[] getSupportedClasses() {
		return classes;
	}
	
	@Override
	public int getId() {
		return ${TYPE_ID};
	}
	
	private int getWriteTypeId(Object obj)
	{
		if (obj == null) {
			return 0xFF;
		}
		Class<?> clazz = obj.getClass();
		return classMap.get(clazz);
	}
	
	private Object readKryo(Input input, Kryo kryo, int typeId)
	{
		if (typeId < 0 || typeId >= classes.length) {
			return null;
		}
		kryo.register(classes[typeId]);
		return kryo.readObject(input, classes[typeId]);
	}

	@Override
	public boolean toData(Object obj, DataOutput out) throws IOException {
		 Kryo kryo = kryoThreadLocal.get();
		 out.writeByte(getWriteTypeId(obj));
		 kryo.register(obj.getClass());
		 ByteArrayOutputStream baos = new ByteArrayOutputStream();
         Output output = new Output(baos);
         kryo.writeObject(output, obj);
         output.flush();
         out.writeInt(baos.size());
         out.write(baos.toByteArray());
         return true;
	}

	@Override
	public Object fromData(DataInput in) throws IOException, ClassNotFoundException {
		byte typeId = in.readByte();
		int size = in.readInt();
		byte[] buffer = new byte[size];
		in.readFully(buffer);
        Input input = new Input(buffer);
        Kryo kryo = kryoThreadLocal.get();
        return readKryo(input, kryo, typeId);
	}
}